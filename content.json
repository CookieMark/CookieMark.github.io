[{"title":"","date":"2017-04-07T11:56:50.021Z","path":"2017/04/07/New Document/","text":"HTTP协议（超文本传输协议）： URL：网页地址。例：http://www.xxx.com/abc/bcd.html http://www.xxx.com/index.asp http://www.xxx.com 等都是URL。 HTTP遵循：请求（request）、相应（respsonse） 两部分 http请求（request）： 当发送请求包，自然也有响应包： http响应： HTTP请求方式：Get、Post、Put、Delete、trace、等常见如下：Get：用于短内容和不用保密的信息Post：用于传输长内容或需保密的信息。 危险请求方式：PUT：危险请求方式，用于请求服务器把请求的实体储存在请求资源下。如果资源存在，则替换服务器的原先数据。（用抓包工具利用）Delete：请求方式可改成删除指定资源Trace：允许客户端了解数据链另一端的接受情况，并利用这些数据信息去做相关测试。…. 响应行重要状态码：200：请求成功，正常执行302：网页发生跳转 （URL重定向）401：未授权403：服务器拒绝服务。404：请求资源不存在 500：服务器内部错误。 http与https区别：https单纯的比http更安全而已。安全基础是SSL。即：http+SSL == https Http端口：80https端口：443 截取http协议包工具：burpsuit/Fiddler/ 利用截取的协议包，可进行任意的更改操作。从而达到相关测试的目的。例如：1．修改/伪造的Cookies值 从而达到登陆的目的 2．无限重放协议包，从而达到自动化暴力破解登陆账号的目的 3．修改请求的上传文件类型。从而绕过本地/远程白名单限制。 4．查看上传地址，从而获取上次文件的URL位置 5．简单获取服务器信息","tags":[]},{"title":"Hello World","date":"2017-04-07T02:58:06.247Z","path":"2017/04/07/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]